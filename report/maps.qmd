---
format:
  html:
    code-fold: true
---

# Maps

```{r, echo=FALSE, output=FALSE, warning=FALSE, error=FALSE}
# load the required packages and install them if they are not.
packages_loaded <- c(
  "here",
  "dplyr",
  "ggplot2",
  "tidyverse",
  "lubridate",
  "DT",
  "plotly",
  "ggridges",
  "leaflet",
  "sf",
  "treemap",
  "tidyr"
)

# Function that install the packages if not already installed on your computer
for (pkg in packages_loaded) {
  if (!pkg %in% installed.packages()) {
    install.packages(pkg)}}

# load the packages
for (pkg in packages_loaded) {
  library(pkg, character.only = TRUE)}

# cleaning of the environment
rm(pkg)
# Import and setup data

data <- read.csv("../data/TMS_dataset_Vaud_20240314_FINAL.csv", sep = ",")

df <- data[, 18:33]

# Keep english columns only
seq(2, 17, 2)
df <- df[, seq(2, 17, 2)]

# Set responses to binary values
for (i in 1:ncol(df)) {
  df[, i] <- ifelse(df[, i] == "Applies", 1, ifelse(df[, i] == "Not applicable", 0, NA))
}

# We add a column to separate couples from families. Here people only traveled with their partner.

df$couples <- ifelse(df$F31_02_ENG == 1 & df$F31_03_ENG == 0 & df$F31_04_ENG == 0 & df$F31_05_ENG == 0, 1, 0)


# Data from https://labs.karavia.ch/swiss-boundaries-geojson/
districts <- sf::read_sf("../data/swiss_districts.geojson")
#districts

```

```{r}

#districts$KANTONSNUM <- as.vector(districts$KANTONSNUM)
vaud <- districts |>
  dplyr::filter(KANTONSNUM == 22)

```

```{r}

# We will transform data to include corresponding leaflet district. 
#unique(data$F105_Code)

# Create a new column 'leaflet_region' with NA values
data$leaflet_districts <- NA

# Assign cities to districts based on conditions
data$leaflet_districts[data$F105_Code == "Lausanne"] <- "Lausanne"
data$leaflet_districts[data$F105_Code %in% c("Montreux", "Vevey", "La Tour-de-Peilz", "Rougemont", "Château-d'Oex", "Veytaux", "Rossinière", "Corsier-sur-Vevey", "Saint-Légier-La-Chiésaz", "Blonay", "Chardonne", "Chernex")] <- "Riviera-Pays-d'Enhaut"
data$leaflet_districts[data$F105_Code %in% c("Morges", "Yens", "Aubonne")] <- "Morges"
data$leaflet_districts[data$F105_Code %in% c("Yverdon-les-Bains", "L'Abbaye", "Vallorbe", "Orbe", "Yvonand", "La Praz", "Le Chenit", "Bullet", "Montagny-près-Yverdon", "Saint Croix", "Le Rocheray", "Le Pont", "Le Sentier", "Le Brassus", "Les Rasses", "Les Charbonnieres")] <- "Jura-Nord vaudois"
data$leaflet_districts[data$F105_Code %in% c("Aigle", "Leysin", "Villeneuve (VD)", "Ormont-Dessus", "Bex", "Lavey-Morcles", "Gryon", "Ormont-Dessous", "Les Diablerets", "Villars-sur-Ollon")] <- "Aigle"
data$leaflet_districts[data$F105_Code %in% c("Nyon", "Prangins", "Chavannes-de-Bogis", "Coppet", "Rolle", "Commugny", "Duillier", "Gilly", "Founex")] <- "Nyon"
data$leaflet_districts[data$F105_Code %in% c("Valbroye", "Lucens", "Avenches", "Payerne", "Cudrefin", "St. Aubin", "Estavayer-le-Lac")] <- "Broye-Vully"
data$leaflet_districts[data$F105_Code %in% c("Crissier", "Bussigny", "Ecublens (VD)", "Renens", "Saint-Sulpice (VD)")] <- "Ouest lausannois"
data$leaflet_districts[data$F105_Code %in% c("Chexbres", "Bourg-en-Lavaux", "Cully")] <- "Lavaux-Oron"
data$leaflet_districts[data$F105_Code %in% c("Echallens")] <- "Gros-de-Vaud"

# Count districts in data and add to vaud
vaud$sum <- NA

vaud$sum[vaud$NAME == "Jura-Nord vaudois"] <- sum(data$leaflet_districts == "Jura-Nord vaudois")
vaud$sum[vaud$NAME == "Aigle"] <- sum(data$leaflet_districts == "Aigle")
vaud$sum[vaud$NAME == "Morges"] <- sum(data$leaflet_districts == "Morges")
vaud$sum[vaud$NAME == "Nyon"] <- sum(data$leaflet_districts == "Nyon")
vaud$sum[vaud$NAME == "Riviera-Pays-d'Enhaut"] <- sum(data$leaflet_districts == "Riviera-Pays-d'Enhaut")
vaud$sum[vaud$NAME == "Gros-de-Vaud"] <- sum(data$leaflet_districts == "Gros-de-Vaud")
vaud$sum[vaud$NAME == "Broye-Vully"] <- sum(data$leaflet_districts == "Broye-Vully")
vaud$sum[vaud$NAME == "Lavaux-Oron"] <- sum(data$leaflet_districts == "Lavaux-Oron")
vaud$sum[vaud$NAME == "Lausanne"] <- sum(data$leaflet_districts == "Lausanne")
vaud$sum[vaud$NAME == "Broye-Vully"] <- sum(data$leaflet_districts == "Broye-Vully")
vaud$sum[vaud$NAME == "Ouest lausannois"] <- sum(data$leaflet_districts == "Ouest lausannois")

```

## Group types

::: panel-tabset
# Couples
This is a plot of the proportion of visitors for each district traveling as a couple, which means only with their partner, without friends or other family.
```{r}
# Couples

# Add couples column to data
data$couples <- df$couples

# Function to calculate sums for couples
calculate_couples_sum <- function(data, vaud) {
  vaud$couples_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$couples_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$couples == 1)
  }
  return(vaud)
}
vaud <- calculate_couples_sum(data, vaud)

# Now we will plot the proportion of couples for each district in %
vaud$couples_proportion <- round((vaud$couples_sum / vaud$sum) * 100, 2)

# Couples proportion plot
couples_palette <- leaflet::colorNumeric(palette = "Purples", domain = vaud$couples_proportion)

leaflet(vaud) %>%
  leaflet::addTiles() %>%
  leaflet::setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  leaflet::addPolygons(fillOpacity = 0.75, color = ~couples_palette(vaud$couples_proportion), weight = 0) %>%
  leaflet::addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$couples_proportion, "%"))
# High proportion of couples without children in Broye-Vully and Lavaux-Oron
```

# Children
This is a plot of the proportion of visitors for each district traveling with children.
```{r}
# Add children column to data
data$children <- df$F31_04_ENG

# Function to calculate sums for children
calculate_children_sum <- function(data, vaud) {
  vaud$children_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$children_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$children == 1)
  }
  return(vaud)
}
vaud <- calculate_children_sum(data, vaud)

# Now we will plot the proportion of children for each district in %
vaud$children_proportion <- round((vaud$children_sum / vaud$sum) * 100, 2)

# Children proportion plot
children_palette <- colorNumeric(palette = "Purples", domain = vaud$children_proportion)

leaflet(vaud) %>%
  leaflet::addTiles() %>%
  leaflet::setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  leaflet::addPolygons(fillOpacity = 0.75, color = ~children_palette(vaud$children_proportion), weight = 0) %>%
  leaflet::addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$children_proportion, "%"))
# High proportion of children in Aigle discrict, maybe for ski holidays.

```

# Alone
This is a plot of the proportion of visitors for each district traveling alone.
```{r}
# Add alone column to data
data$alone <- df$F31_01_ENG

# Function to calculate sums for alone
calculate_alone_sum <- function(data, vaud) {
  vaud$alone_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$alone_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$alone == 1)
  }
  return(vaud)
}
vaud <- calculate_alone_sum(data, vaud)

# Now we will plot the proportion of alone for each district in %
vaud$alone_proportion <- round((vaud$alone_sum / vaud$sum) * 100, 2)

# Alone proportion plot
alone_palette <- colorNumeric(palette = "Purples", domain = vaud$alone_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~alone_palette(vaud$alone_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$alone_proportion, "%"))
# Highest proportion of lone travelers in La Côte region
```
:::

## Swiss tourists
```{r}
# Swiss sub columns

#unique(data[data$F05_02 == "Schweiz", ]$F05_03)

swiss_german_cantons = c("Luzern", "Schwyz", "Bern", "Neuenburg", "Aargau",
                         "Zürich", "Basel-Stadt", "Basel-Landschaft", "Obwalden",
                         "Appenzell Innerrhoden", "Freiburg", "Schaffhausen", "Thurgau",
                         "St. Gallen", "Solothurn", "Uri", "Zug", "Nidwalden",
                         "Appenzell Ausserrhoden")

swiss_french_cantons = c("Waadt", "Wallis", "Genf", "Freiburg", "Jura")

swiss_italian_cantons = c("Tessin")
```

::: panel-tabset
# Swiss-German
Here we see the proportion of Swiss-German travelers for each district.
```{r}
# Binary column for swiss germans
data$swiss_german <- ifelse(data$F05_02 == "Schweiz" & data$F05_03 %in% swiss_german_cantons, 1, 0)

# Function to calculate sums for swiss-germans
calculate_swiss_german_sum <- function(data, vaud) {
  vaud$swiss_german_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$swiss_german_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$swiss_german == 1)
  }
  return(vaud)
}
vaud <- calculate_swiss_german_sum(data, vaud)

# Now we will plot the proportion of swiss_german for each district in %
vaud$swiss_german_proportion <- round((vaud$swiss_german_sum / vaud$sum) * 100, 2)

# swiss_german proportion plot
swiss_german_palette <- colorNumeric(palette = "Purples", domain = vaud$swiss_german_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~swiss_german_palette(vaud$swiss_german_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$swiss_german_proportion, "%"))

```

# Swiss-French
Here we see the proportion of Swiss-French travelers for each district
```{r}
# Binary column for swiss french
data$swiss_french <- ifelse(data$F05_02 == "Schweiz" & data$F05_03 %in% swiss_french_cantons, 1, 0)

# Function to calculate sums for swiss-french
calculate_swiss_french_sum <- function(data, vaud) {
  vaud$swiss_french_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$swiss_french_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$swiss_french == 1)
  }
  return(vaud)
}
vaud <- calculate_swiss_french_sum(data, vaud)

# Now we will plot the proportion of swiss_french for each district in %
vaud$swiss_french_proportion <- round((vaud$swiss_french_sum / vaud$sum) * 100, 2)

# swiss_french proportion plot
swiss_french_palette <- colorNumeric(palette = "Purples", domain = vaud$swiss_french_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~swiss_french_palette(vaud$swiss_french_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$swiss_french_proportion, "%"))

```

:::
The proportion of travelers from Ticino and Grisons is negligible (< 1% proportion for any district) so we don't include them on the map.

# French tourists

::: panel-tabset
# Île-de-France
```{r}
# Binary column for Île-de-France
data$france_idf <- ifelse(data$F05_02 == "Frankreich" & data$F05_03 == "Île-de-France", 1, 0)

# Function to calculate sums for Île-de-France
calculate_france_idf_sum <- function(data, vaud) {
  vaud$france_idf_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$france_idf_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$france_idf == 1)
  }
  return(vaud)
}
vaud <- calculate_france_idf_sum(data, vaud)

# Now we will plot the proportion of france_idf for each district in %
vaud$france_idf_proportion <- round((vaud$france_idf_sum / vaud$sum) * 100, 2)

# france_idf proportion plot
france_idf_palette <- colorNumeric(palette = "Purples", domain = vaud$france_idf_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~france_idf_palette(vaud$france_idf_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$france_idf_proportion, "%"))


```

# Auvergne-Rhône-Alpes
```{r}
# Binary column for Auvergne-Rhône-Alpes
data$france_ara <- ifelse(data$F05_02 == "Frankreich" & data$F05_03 == "Auvergne-Rhône-Alpes", 1, 0)

# Function to calculate sums for Auvergne-Rhône-Alpes
calculate_france_ara_sum <- function(data, vaud) {
  vaud$france_ara_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$france_ara_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$france_ara == 1)
  }
  return(vaud)
}
vaud <- calculate_france_ara_sum(data, vaud)

# Now we will plot the proportion of france_ara for each district in %
vaud$france_ara_proportion <- round((vaud$france_ara_sum / vaud$sum) * 100, 2)

# france_ara proportion plot
france_ara_palette <- colorNumeric(palette = "Purples", domain = vaud$france_ara_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~france_ara_palette(vaud$france_ara_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$france_ara_proportion, "%"))


```
:::