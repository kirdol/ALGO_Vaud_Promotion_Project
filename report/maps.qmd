---
format:
  html:
    code-fold: true
---

# Detailed maps analysis

Within this section, we present a series of maps showcasing the districts of canton Vaud, each illustrating the proportion of visitors from specific origins and demographic categories. These visualizations offer insights into the distribution of visitors across different regions, providing context for the diversity of visitors within the canton.

Note that the proportions displayed on the map represent percentages relative to the total number of visitors per district. However, due to the small numbers of visitors of certain origins and nationalities, these proportions should not be taken at face value for all areas. For better context, the total number of visitors per district is displayed alongside the percentage.

```{r, echo = FALSE, output = FALSE, warning = FALSE, warning = FALSE}
# Load the packages and load the data
source(here::here("scripts", "setup.R"))
data <- read.csv(here("data","TMS_dataset_Vaud_20240314_FINAL.csv"),
                 sep = ",")
# Select only the columns we need and keeping only the english columns
df <- data[, 18:33] # columns from F31_01_ENG to F31_17_ENG
df <- df[, seq(2, 17, 2)] # select only the columns with the english questions

# Set responses to binary values
for (i in 1:ncol(df)) {
  df[, i] <- ifelse(df[, i] == "Applies", 1,
                    ifelse(df[, i] == "Not applicable", 0, NA))}

# We add a column to separate couples from families. Here people only traveled with their partner.
df$couples <- ifelse(df$F31_02_ENG == 1 &
                       df$F31_03_ENG == 0 &
                       df$F31_04_ENG == 0 &
                       df$F31_05_ENG == 0,1, 0)


# Data from https://labs.karavia.ch/swiss-boundaries-geojson/
districts <- sf::read_sf(here("data","swiss_districts.geojson"))
```

```{r, echo = FALSE}
vaud <- districts |>
  dplyr::filter(KANTONSNUM == 22)
```

```{r, echo = FALSE}
# We will transform data to include corresponding leaflet district. 
#unique(data$F105_Code)

# Create a new column 'leaflet_region' with NA values
data$leaflet_districts <- NA

# Assign cities to districts based on conditions
data$leaflet_districts[data$F105_Code == "Lausanne"] <- "Lausanne"
data$leaflet_districts[data$F105_Code %in% c("Montreux", "Vevey", "La Tour-de-Peilz", "Rougemont", "Château-d'Oex", "Veytaux", "Rossinière", "Corsier-sur-Vevey", "Saint-Légier-La-Chiésaz", "Blonay", "Chardonne", "Chernex")] <- "Riviera-Pays-d'Enhaut"
data$leaflet_districts[data$F105_Code %in% c("Morges", "Yens", "Aubonne")] <- "Morges"
data$leaflet_districts[data$F105_Code %in% c("Yverdon-les-Bains", "L'Abbaye", "Vallorbe", "Orbe", "Yvonand", "La Praz", "Le Chenit", "Bullet", "Montagny-près-Yverdon", "Saint Croix", "Le Rocheray", "Le Pont", "Le Sentier", "Le Brassus", "Les Rasses", "Les Charbonnieres")] <- "Jura-Nord vaudois"
data$leaflet_districts[data$F105_Code %in% c("Aigle", "Leysin", "Villeneuve (VD)", "Ormont-Dessus", "Bex", "Lavey-Morcles", "Gryon", "Ormont-Dessous", "Les Diablerets", "Villars-sur-Ollon")] <- "Aigle"
data$leaflet_districts[data$F105_Code %in% c("Nyon", "Prangins", "Chavannes-de-Bogis", "Coppet", "Rolle", "Commugny", "Duillier", "Gilly", "Founex")] <- "Nyon"
data$leaflet_districts[data$F105_Code %in% c("Valbroye", "Lucens", "Avenches", "Payerne", "Cudrefin", "St. Aubin", "Estavayer-le-Lac")] <- "Broye-Vully"
data$leaflet_districts[data$F105_Code %in% c("Crissier", "Bussigny", "Ecublens (VD)", "Renens", "Saint-Sulpice (VD)")] <- "Ouest lausannois"
data$leaflet_districts[data$F105_Code %in% c("Chexbres", "Bourg-en-Lavaux", "Cully")] <- "Lavaux-Oron"
data$leaflet_districts[data$F105_Code %in% c("Echallens")] <- "Gros-de-Vaud"

# Count districts in data and add to vaud
vaud$sum <- NA

vaud$sum[vaud$NAME == "Jura-Nord vaudois"] <- sum(data$leaflet_districts == "Jura-Nord vaudois")
vaud$sum[vaud$NAME == "Aigle"] <- sum(data$leaflet_districts == "Aigle")
vaud$sum[vaud$NAME == "Morges"] <- sum(data$leaflet_districts == "Morges")
vaud$sum[vaud$NAME == "Nyon"] <- sum(data$leaflet_districts == "Nyon")
vaud$sum[vaud$NAME == "Riviera-Pays-d'Enhaut"] <- sum(data$leaflet_districts == "Riviera-Pays-d'Enhaut")
vaud$sum[vaud$NAME == "Gros-de-Vaud"] <- sum(data$leaflet_districts == "Gros-de-Vaud")
vaud$sum[vaud$NAME == "Broye-Vully"] <- sum(data$leaflet_districts == "Broye-Vully")
vaud$sum[vaud$NAME == "Lavaux-Oron"] <- sum(data$leaflet_districts == "Lavaux-Oron")
vaud$sum[vaud$NAME == "Lausanne"] <- sum(data$leaflet_districts == "Lausanne")
vaud$sum[vaud$NAME == "Broye-Vully"] <- sum(data$leaflet_districts == "Broye-Vully")
vaud$sum[vaud$NAME == "Ouest lausannois"] <- sum(data$leaflet_districts == "Ouest lausannois")
```

## Group types

The following maps depict how people travel to the canton of Vaud. It shows the proportion of visitors from each region that came with their children, alone or as a couple. Note that someone can be in multiple categories. For example, someone can be a couple and have children. He would then be counted in the couples and children categories.

::: panel-tabset

# Couples

This is a plot of the proportion of visitors for each district traveling as a couple, which means only with their partner, without friends or other family. We notice a high proportion of couples in Broye-Vully and Lavaux-Oron.

```{r, echo = FALSE}
# Couples

# Add couples column to data
data$couples <- df$couples

# Function to calculate sums for couples
calculate_couples_sum <- function(data, vaud) {
  vaud$couples_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$couples_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$couples == 1)
  }
  return(vaud)
}
vaud <- calculate_couples_sum(data, vaud)

# Now we will plot the proportion of couples for each district in %
vaud$couples_proportion <- round((vaud$couples_sum / vaud$sum) * 100, 2)

# Couples proportion plot
couples_palette <- leaflet::colorNumeric(palette = maps_palette, domain = vaud$couples_proportion)

leaflet(vaud) %>%
  leaflet::addTiles() %>%
  leaflet::setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  leaflet::addPolygons(fillOpacity = 0.75, color = ~couples_palette(vaud$couples_proportion), weight = 0) %>%
  leaflet::addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$couples_proportion, "%", "Total: ", vaud$couples_sum))
# High proportion of couples without children in Broye-Vully and Lavaux-Oron
```

# Children

This plot shows the proportion of visitors traveling with children in each district. Notably, Jura-Nord Vaudois and Aigle districts exhibit a high proportion of children. We attribute this to the prevalence of ski holidays and family-friendly outdoor activities, such as hiking, in these regions.

```{r, echo = FALSE}
# Add children column to data
data$children <- df$F31_04_ENG

# Function to calculate sums for children
calculate_children_sum <- function(data, vaud) {
  vaud$children_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$children_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$children == 1)
  }
  return(vaud)
}
vaud <- calculate_children_sum(data, vaud)

# Now we will plot the proportion of children for each district in %
vaud$children_proportion <- round((vaud$children_sum / vaud$sum) * 100, 2)

# Children proportion plot
children_palette <- colorNumeric(palette = maps_palette, domain = vaud$children_proportion)

leaflet(vaud) %>%
  leaflet::addTiles() %>%
  leaflet::setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  leaflet::addPolygons(fillOpacity = 0.75, color = ~children_palette(vaud$children_proportion), weight = 0) %>%
  leaflet::addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$children_proportion, "%", "Total: ", vaud$children_sum))
# High proportion of children in Aigle discrict, maybe for ski holidays.
```

# Alone

This is a plot of the proportion of visitors for each district traveling alone. The highest proportion of solo visitors is in La Côte region, in districts of Morges and Nyon.

```{r, echo = FALSE}
# Add alone column to data
data$alone <- df$F31_01_ENG

# Function to calculate sums for alone
calculate_alone_sum <- function(data, vaud) {
  vaud$alone_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$alone_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$alone == 1)
  }
  return(vaud)
}
vaud <- calculate_alone_sum(data, vaud)

# Now we will plot the proportion of alone for each district in %
vaud$alone_proportion <- round((vaud$alone_sum / vaud$sum) * 100, 2)

# Alone proportion plot
alone_palette <- colorNumeric(palette = maps_palette, domain = vaud$alone_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~alone_palette(vaud$alone_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$alone_proportion, "%", "Total: ", vaud$alone_sum))
# Highest proportion of lone travelers in La Côte region
```

:::

## Seasonality

These maps show us which districts are most visited in the two main yearly seasons, summer and winter. We see a clear change in the district of Aigle, which has many more visitors during the winter, due to it being a region that is home to many ski slopes and winter activities. The main district that seems to profit from the summer months is Jura-Nord Vaudois, and the proportion of visitors to the capital is indifferent to the seasons.

::: panel-tabset

# Summer

```{r, echo = FALSE}
# Function to calculate sums for summer
calculate_summer_sum <- function(data, vaud) {
  vaud$summer_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$summer_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$F12_F13_Mittelwert_2Cat_final == "Summer")
  }
  return(vaud)
}
vaud <- calculate_summer_sum(data, vaud)

# Now we will plot the proportion of summer for each district in %
vaud$summer_proportion <- round((vaud$summer_sum / vaud$sum) * 100, 2)

# Alone proportion plot
summer_palette <- colorNumeric(palette = maps_palette, domain = vaud$summer_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~summer_palette(vaud$summer_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$summer_proportion, "%", "Total: ", vaud$summer_sum))
```

# Winter

```{r, echo = FALSE}
# Function to calculate sums for winter
calculate_winter_sum <- function(data, vaud) {
  vaud$winter_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$winter_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$F12_F13_Mittelwert_2Cat_final == "Winter")
  }
  return(vaud)
}
vaud <- calculate_winter_sum(data, vaud)

# Now we will plot the proportion of winter for each district in %
vaud$winter_proportion <- round((vaud$winter_sum / vaud$sum) * 100, 2)

# Alone proportion plot
winter_palette <- colorNumeric(palette = maps_palette, domain = vaud$winter_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~winter_palette(vaud$winter_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$winter_proportion, "%", "Total: ", vaud$winter_sum))
```

:::

As expected, we see a clear distinction between the summer and winter seasons. The tourists are more likely to visit cities and districts in the mountains during the winter months, while spending most of their time on the plateau during the summer.

## Average spending

Here is a map of the average and total spending by district. We can see that both the average and total spending are highest in the district of Riviera-Pays-d'Enhaut. We only take into account respondents with total expenses of under 30'000 CHF in order to filter outliers.

```{r, echo = FALSE}
# Drop outliers
data_spending <- subset(data, F81_Total < 30000)

calculate_spending_sum <- function(data_spending, vaud) {
  vaud$spending_sum <- NA
  unique_values <- unique(data_spending$leaflet_districts)
  for (value in unique_values) {
    vaud$spending_sum[vaud$NAME == value] <- sum(data_spending[data_spending$leaflet_districts == value, "F81_Total"], na.rm = TRUE)
  }
  return(vaud)
}
vaud <- calculate_spending_sum(data_spending, vaud)

vaud$average_spending <- round((vaud$spending_sum / vaud$sum), 0)

# Average spending plot
spending_palette <- colorNumeric(palette = maps_palette, domain = vaud$average_spending)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~spending_palette(vaud$average_spending), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$average_spending, "CHF", "Total: ", vaud$spending_sum, "CHF"))
```

It is interesting to see that the tourists that came to the region of Montreux have spent the most on average, around 2600 CHF. The tourists that came to Lausanne spent closer to 2300 CHF, while in the rest of the regions, they spent between 1500 and 2000 CHF on average. This is a large difference in spending between the districts.

## Swiss tourists

Let's explore on a map the proportion of Swiss tourists in each district. We separated the Swiss-German and Swiss-French tourists to check for different preference patterns. The proportion of travelers from Ticino and Grisons is negligible (< 1% proportion for any district), so we don't include them on the map.

```{r, echo = FALSE}
# Swiss sub columns

#unique(data[data$F05_02 == "Schweiz", ]$F05_03)

swiss_german_cantons = c("Luzern", "Schwyz", "Bern", "Neuenburg", "Aargau",
                         "Zürich", "Basel-Stadt", "Basel-Landschaft", "Obwalden",
                         "Appenzell Innerrhoden", "Freiburg", "Schaffhausen", "Thurgau",
                         "St. Gallen", "Solothurn", "Uri", "Zug", "Nidwalden",
                         "Appenzell Ausserrhoden")

swiss_french_cantons = c("Waadt", "Wallis", "Genf", "Freiburg", "Jura")

swiss_italian_cantons = c("Tessin")
```

::: panel-tabset

# Swiss-German

Here we see the proportion of Swiss-German travelers for each district.

```{r, echo = FALSE}
# Binary column for swiss germans
data$swiss_german <- ifelse(data$F05_02 == "Schweiz" & data$F05_03 %in% swiss_german_cantons, 1, 0)

# Function to calculate sums for swiss-germans
calculate_swiss_german_sum <- function(data, vaud) {
  vaud$swiss_german_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$swiss_german_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$swiss_german == 1)
  }
  return(vaud)
}
vaud <- calculate_swiss_german_sum(data, vaud)

# Now we will plot the proportion of swiss_german for each district in %
vaud$swiss_german_proportion <- round((vaud$swiss_german_sum / vaud$sum) * 100, 2)

# swiss_german proportion plot
swiss_german_palette <- colorNumeric(palette = maps_palette, domain = vaud$swiss_german_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~swiss_german_palette(vaud$swiss_german_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$swiss_german_proportion, "%", "Total: ", vaud$swiss_german_sum))
```

# Swiss-French

Here we see the proportion of Swiss-French travelers for each district.

```{r, echo = FALSE}
# Binary column for swiss french
data$swiss_french <- ifelse(data$F05_02 == "Schweiz" & data$F05_03 %in% swiss_french_cantons, 1, 0)

# Function to calculate sums for swiss-french
calculate_swiss_french_sum <- function(data, vaud) {
  vaud$swiss_french_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$swiss_french_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$swiss_french == 1)
  }
  return(vaud)
}
vaud <- calculate_swiss_french_sum(data, vaud)

# Now we will plot the proportion of swiss_french for each district in %
vaud$swiss_french_proportion <- round((vaud$swiss_french_sum / vaud$sum) * 100, 2)

# swiss_french proportion plot
swiss_french_palette <- colorNumeric(palette = maps_palette, domain = vaud$swiss_french_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~swiss_french_palette(vaud$swiss_french_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$swiss_french_proportion, "%", "Total: ", vaud$swiss_french_sum))
```

:::

Interestingly, Swiss-German tourists represent a high proportion of the tourists in the Jura Nord vaudois region. The Swiss-French tourists, on the other hand, seem more present in the region of Aigle.

## French tourists

Let's explore, on a map, the most frequently visited districts by French tourists. We separated the tourists from Île-de-France, Auvergne-Rhône-Alpes, and the rest of France to check for different preference patterns and proportions of French tourists in each region.

::: panel-tabset

# Île-de-France

```{r, echo = FALSE}
# Binary column for Île-de-France
data$france_idf <- ifelse(data$F05_02 == "Frankreich" & data$F05_03 == "Île-de-France", 1, 0)

# Function to calculate sums for Île-de-France
calculate_france_idf_sum <- function(data, vaud) {
  vaud$france_idf_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$france_idf_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$france_idf == 1)
  }
  return(vaud)
}
vaud <- calculate_france_idf_sum(data, vaud)

# Now we will plot the proportion of france_idf for each district in %
vaud$france_idf_proportion <- round((vaud$france_idf_sum / vaud$sum) * 100, 2)

# france_idf proportion plot
france_idf_palette <- colorNumeric(palette = maps_palette, domain = vaud$france_idf_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~france_idf_palette(vaud$france_idf_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$france_idf_proportion, "%", "Total: ", vaud$france_idf_sum))
```

# Auvergne-Rhône-Alpes

```{r, echo = FALSE}
# Binary column for Auvergne-Rhône-Alpes
data$france_ara <- ifelse(data$F05_02 == "Frankreich" & data$F05_03 == "Auvergne-Rhône-Alpes", 1, 0)

# Function to calculate sums for Auvergne-Rhône-Alpes
calculate_france_ara_sum <- function(data, vaud) {
  vaud$france_ara_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$france_ara_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$france_ara == 1)
  }
  return(vaud)
}
vaud <- calculate_france_ara_sum(data, vaud)

# Now we will plot the proportion of france_ara for each district in %
vaud$france_ara_proportion <- round((vaud$france_ara_sum / vaud$sum) * 100, 2)

# france_ara proportion plot
france_ara_palette <- colorNumeric(palette = maps_palette, domain = vaud$france_ara_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~france_ara_palette(vaud$france_ara_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$france_ara_proportion, "%", "Total: ", vaud$france_ara_sum))
```

# Rest of France

```{r, echo = FALSE}
# Binary column for Rest of France
data$france_rest <- ifelse(data$F05_02 == "Frankreich" &
                             data$F05_03 != "Auvergne-Rhône-Alpes" &
                             data$F05_03 != "Île-de-France", 1, 0)

# Function to calculate sums for Rest of France
calculate_france_rest_sum <- function(data, vaud) {
  vaud$france_rest_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$france_rest_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$france_rest == 1)
  }
  return(vaud)
}
vaud <- calculate_france_rest_sum(data, vaud)

# Now we will plot the proportion of france_rest for each district in %
vaud$france_rest_proportion <- round((vaud$france_rest_sum / vaud$sum) * 100, 2)

# france_rest proportion plot
france_rest_palette <- colorNumeric(palette = maps_palette, domain = vaud$france_rest_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~france_rest_palette(vaud$france_rest_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$france_rest_proportion, "%", "Total: ", vaud$france_rest_sum))
```

:::

We can see on the maps that the tourists from Île-de-France are well represented in the region of Lausanne, while the tourists from Auvergne-Rhône-Alpes and the rest of France are also well represented in the region of Lausanne, but also notably in the other regions.

## British tourists

You can find on the map below the most visited regions in proportion to the total number of visitors in the region by British tourists. We separated the tourists from London, the rest of England, and Scotland to check for different preference patterns. There were too few visitors from Northern Ireland and Wales to be included in the map.

::: panel-tabset

# London

```{r, echo = FALSE}
# Binary column for uk_london
data$uk_london <- ifelse(data$F05_02_ENG == "United Kingdom" & data$F05_03 == "England" & data$F05_04 == "London City of", 1, 0)

# Function to calculate sums for uk_london
calculate_uk_london_sum <- function(data, vaud) {
  vaud$uk_london_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$uk_london_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$uk_london == 1)
  }
  return(vaud)
}
vaud <- calculate_uk_london_sum(data, vaud)

# Now we will plot the proportion of uk_london for each district in %
vaud$uk_london_proportion <- round((vaud$uk_london_sum / vaud$sum) * 100, 2)

# uk_london proportion plot
uk_london_palette <- colorNumeric(palette = maps_palette, domain = vaud$uk_london_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~uk_london_palette(vaud$uk_london_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$uk_london_proportion, "%", "Total: ", vaud$uk_london_sum))
```

# Rest of England

```{r, echo = FALSE}
# Binary column for uk_england
data$uk_england <- ifelse(data$F05_02_ENG == "United Kingdom" & data$F05_03 == "England" & data$F05_04 != "London City of", 1, 0)

# Function to calculate sums for uk_england
calculate_uk_england_sum <- function(data, vaud) {
  vaud$uk_england_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$uk_england_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$uk_england == 1)
  }
  return(vaud)
}
vaud <- calculate_uk_england_sum(data, vaud)

# Now we will plot the proportion of uk_england for each district in %
vaud$uk_england_proportion <- round((vaud$uk_england_sum / vaud$sum) * 100, 2)

# uk_england proportion plot
uk_england_palette <- colorNumeric(palette = maps_palette, domain = vaud$uk_england_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~uk_england_palette(vaud$uk_england_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$uk_england_proportion, "%", "Total: ", vaud$uk_england_sum))
```

# Scotland

```{r, echo = FALSE}
# Binary column for uk_scotland
data$uk_scotland <- ifelse(data$F05_02_ENG == "United Kingdom" & data$F05_03 == "Scotland", 1, 0)

# Function to calculate sums for uk_scotland
calculate_uk_scotland_sum <- function(data, vaud) {
  vaud$uk_scotland_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$uk_scotland_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$uk_scotland == 1)
  }
  return(vaud)
}
vaud <- calculate_uk_scotland_sum(data, vaud)

# Now we will plot the proportion of uk_scotland for each district in %
vaud$uk_scotland_proportion <- round((vaud$uk_scotland_sum / vaud$sum) * 100, 2)

# uk_scotland proportion plot
uk_scotland_palette <- colorNumeric(palette = maps_palette, domain = vaud$uk_scotland_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~uk_scotland_palette(vaud$uk_scotland_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$uk_scotland_proportion, "%", "Total: ", vaud$uk_scotland_sum))
```

:::

There was a high proportion of visitors from London in the district of Lavaux-Oron. We can't confirm that visitors from London are more interested in this district than other UK tourists, since the sample is so small.

## German tourists

You can find on the map below the most visited regions in proportion to the total number of visitors in the region by German tourists. We separated the tourists from Baden-Württemberg, Bayern, and Nordrhein-Westfalen to check for different preference patterns.

::: panel-tabset

# Baden-Württemberg

```{r, cache = TRUE}
# Binary column for de_baden
data$de_baden <- ifelse(data$F05_02 == "Deutschland" & data$F05_03 == "Baden-Württemberg", 1, 0)

# Function to calculate sums for de_baden
calculate_de_baden_sum <- function(data, vaud) {
  vaud$de_baden_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$de_baden_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$de_baden == 1)
  }
  return(vaud)
}
vaud <- calculate_de_baden_sum(data, vaud)

# Now we will plot the proportion of de_baden for each district in %
vaud$de_baden_proportion <- round((vaud$de_baden_sum / vaud$sum) * 100, 2)

# de_baden proportion plot
de_baden_palette <- colorNumeric(palette = maps_palette, domain = vaud$de_baden_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~de_baden_palette(vaud$de_baden_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$de_baden_proportion, "%", "Total: ", vaud$de_baden_sum))
```

Baden-Württemberg is the German region that is closest to Vaud geographically.

# Bayern

```{r, echo = FALSE}
# Binary column for de_bayern
data$de_bayern <- ifelse(data$F05_02 == "Deutschland" & data$F05_03 == "Bayern", 1, 0)

# Function to calculate sums for de_bayern
calculate_de_bayern_sum <- function(data, vaud) {
  vaud$de_bayern_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$de_bayern_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$de_bayern == 1)
  }
  return(vaud)
}
vaud <- calculate_de_bayern_sum(data, vaud)

# Now we will plot the proportion of de_bayern for each district in %
vaud$de_bayern_proportion <- round((vaud$de_bayern_sum / vaud$sum) * 100, 2)

# de_bayern proportion plot
de_bayern_palette <- colorNumeric(palette = maps_palette, domain = vaud$de_bayern_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~de_bayern_palette(vaud$de_bayern_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$de_bayern_proportion, "%", "Total: ", vaud$de_bayern_sum))
```

# Nordrhein-Westfalen

```{r, echo = FALSE}
# Binary column for de_nordrhein
data$de_nordrhein <- ifelse(data$F05_02 == "Deutschland" & data$F05_03 == "Nordrhein-Westfalen", 1, 0)

# Function to calculate sums for de_nordrhein
calculate_de_nordrhein_sum <- function(data, vaud) {
  vaud$de_nordrhein_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$de_nordrhein_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$de_nordrhein == 1)
  }
  return(vaud)
}
vaud <- calculate_de_nordrhein_sum(data, vaud)

# Now we will plot the proportion of de_nordrhein for each district in %
vaud$de_nordrhein_proportion <- round((vaud$de_nordrhein_sum / vaud$sum) * 100, 2)

# de_nordrhein proportion plot
de_nordrhein_palette <- colorNumeric(palette = maps_palette, domain = vaud$de_nordrhein_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~de_nordrhein_palette(vaud$de_nordrhein_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$de_nordrhein_proportion, "%", "Total: ", vaud$de_nordrhein_sum))
```

# Rest of Germany

```{r, echo = FALSE}
# Binary column for de_rest
data$de_rest <- ifelse(data$F05_02 == "Deutschland" & data$F05_03 != "Baden-Württemberg" & data$F05_03 != "Bayern" & data$F05_03 != "Nordrhein-Westfalen", 1, 0)

# Function to calculate sums for de_rest
calculate_de_rest_sum <- function(data, vaud) {
  vaud$de_rest_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$de_rest_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$de_rest == 1)
  }
  return(vaud)
}
vaud <- calculate_de_rest_sum(data, vaud)

# Now we will plot the proportion of de_rest for each district in %
vaud$de_rest_proportion <- round((vaud$de_rest_sum / vaud$sum) * 100, 2)

# de_rest proportion plot
de_rest_palette <- colorNumeric(palette = maps_palette, domain = vaud$de_rest_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~de_rest_palette(vaud$de_rest_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$de_rest_proportion, "%", "Total: ", vaud$de_rest_sum))
```

:::

## US tourists

You can find on the map below the most visited regions in proportion to the total number of visitors in the region by US tourists. We separated the tourists from California and the rest of the US to check for different preference patterns.

::: panel-tabset

# California

```{r, echo = FALSE}
# Binary column for us_california
data$us_california <- ifelse(data$F05_02_ENG == "United States of America" & data$F05_03 == "California", 1, 0)

# Function to calculate sums for us_california
calculate_us_california_sum <- function(data, vaud) {
  vaud$us_california_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$us_california_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$us_california == 1)
  }
  return(vaud)
}
vaud <- calculate_us_california_sum(data, vaud)

# Now we will plot the proportion of us_california for each district in %
vaud$us_california_proportion <- round((vaud$us_california_sum / vaud$sum) * 100, 2)

# us_california proportion plot
us_california_palette <- colorNumeric(palette = maps_palette, domain = vaud$us_california_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~us_california_palette(vaud$us_california_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$us_california_proportion, "%", "Total: ", vaud$us_california_sum))
```

# Rest of US

```{r, echo = FALSE}
# Binary column for us_rest
data$us_rest <- ifelse(data$F05_02_ENG == "United States of America" & data$F05_03 != "California", 1, 0)

# Function to calculate sums for us_rest
calculate_us_rest_sum <- function(data, vaud) {
  vaud$us_rest_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$us_rest_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$us_rest == 1)
  }
  return(vaud)
}
vaud <- calculate_us_rest_sum(data, vaud)

# Now we will plot the proportion of us_rest for each district in %
vaud$us_rest_proportion <- round((vaud$us_rest_sum / vaud$sum) * 100, 2)

# us_rest proportion plot
us_rest_palette <- colorNumeric(palette = maps_palette, domain = vaud$us_rest_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~us_rest_palette(vaud$us_rest_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$us_rest_proportion, "%", "Total: ", vaud$us_rest_sum))
```

:::

## Other main countries

The most frequently visited districts by tourists from Belgium, Spain, and the Netherlands can be seen on the map below.

::: panel-tabset

# Belgium

```{r, echo = FALSE}
# Binary column for belgium
data$belgium <- ifelse(data$F05_02_ENG == "Belgium", 1, 0)

# Function to calculate sums for belgium
calculate_belgium_sum <- function(data, vaud) {
  vaud$belgium_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$belgium_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$belgium == 1)
  }
  return(vaud)
}
vaud <- calculate_belgium_sum(data, vaud)

# Now we will plot the proportion of belgium for each district in %
vaud$belgium_proportion <- round((vaud$belgium_sum / vaud$sum) * 100, 2)

# belgium proportion plot
belgium_palette <- colorNumeric(palette = maps_palette, domain = vaud$belgium_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~belgium_palette(vaud$belgium_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$belgium_proportion, "%", "Total: ", vaud$belgium_sum))
```

# Spain

```{r, echo = FALSE}
# Binary column for spain
data$spain <- ifelse(data$F05_02_ENG == "Spain", 1, 0)

# Function to calculate sums for spain
calculate_spain_sum <- function(data, vaud) {
  vaud$spain_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$spain_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$spain == 1)
  }
  return(vaud)
}
vaud <- calculate_spain_sum(data, vaud)

# Now we will plot the proportion of spain for each district in %
vaud$spain_proportion <- round((vaud$spain_sum / vaud$sum) * 100, 2)

# spain proportion plot
spain_palette <- colorNumeric(palette = maps_palette, domain = vaud$spain_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~spain_palette(vaud$spain_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$spain_proportion, "%", "Total: ", vaud$spain_sum))
```

# Netherlands

```{r, echo = FALSE}
# Binary column for netherlands
data$netherlands <- ifelse(data$F05_02_ENG == "Netherlands", 1, 0)

# Function to calculate sums for netherlands
calculate_netherlands_sum <- function(data, vaud) {
  vaud$netherlands_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$netherlands_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$netherlands == 1)
  }
  return(vaud)
}
vaud <- calculate_netherlands_sum(data, vaud)

# Now we will plot the proportion of netherlands for each district in %
vaud$netherlands_proportion <- round((vaud$netherlands_sum / vaud$sum) * 100, 2)

# netherlands proportion plot
netherlands_palette <- colorNumeric(palette = maps_palette, domain = vaud$netherlands_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~netherlands_palette(vaud$netherlands_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$netherlands_proportion, "%", "Total: ", vaud$netherlands_sum))
```

# Canada

```{r, echo = FALSE}
# Binary column for canada
data$canada <- ifelse(data$F05_02_ENG == "Canada", 1, 0)

# Function to calculate sums for canada
calculate_canada_sum <- function(data, vaud) {
  vaud$canada_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$canada_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$canada == 1)
  }
  return(vaud)
}
vaud <- calculate_canada_sum(data, vaud)

# Now we will plot the proportion of canada for each district in %
vaud$canada_proportion <- round((vaud$canada_sum / vaud$sum) * 100, 2)

# canada proportion plot
canada_palette <- colorNumeric(palette = maps_palette, domain = vaud$canada_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~canada_palette(vaud$canada_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$canada_proportion, "%", "Total: ", vaud$canada_sum))
```

# Italy

```{r, echo = FALSE}
# Binary column for italy
data$italy <- ifelse(data$F05_02_ENG == "Italy", 1, 0)

# Function to calculate sums for italy
calculate_italy_sum <- function(data, vaud) {
  vaud$italy_sum <- NA
  unique_values <- unique(data$leaflet_districts)
  for (value in unique_values) {
    vaud$italy_sum[vaud$NAME == value] <- sum(data$leaflet_districts == value & data$italy == 1)
  }
  return(vaud)
}
vaud <- calculate_italy_sum(data, vaud)

# Now we will plot the proportion of italy for each district in %
vaud$italy_proportion <- round((vaud$italy_sum / vaud$sum) * 100, 2)

# italy proportion plot
italy_palette <- colorNumeric(palette = maps_palette, domain = vaud$italy_proportion)

leaflet(vaud) %>%
  addTiles() %>%
  setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  addPolygons(fillOpacity = 0.75, color = ~italy_palette(vaud$italy_proportion), weight = 0) %>%
  addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME, vaud$italy_proportion, "%", "Total: ", vaud$italy_sum))
```

:::

A high proportion of visitors to the Aigle district are from Belgium and the Netherlands. Italy seems to prefer the region of Lausanne.
