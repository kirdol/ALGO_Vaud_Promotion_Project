# Question 4
> Where did they stay? (For example: yes, they went to Montreux, but what type of accommodation, what price?

```{r Initialization, output = FALSE, echo = FALSE}
source(here::here("scripts", "setup.R"))
data <- read.csv(here("data", "TMS_dataset_Vaud_20240314_FINAL.csv"), sep = ",")
```

Let's now dive into the subject of the location of their stay. First, let's have a look at the most popular locations in the canton Vaud. Given the architecture of the study this gives us the city where most people answer the survey.

```{r Most Popular City destinations, echo = FALSE}
resort_counts <- table(data$F105_Code)
accommodation_counts <- table(data$F125_ENG)

# Proportion
resort_counts_df <- as.data.frame(resort_counts)
resort_counts_df$Proportion <- (resort_counts_df$Freq / sum(resort_counts_df$Freq))

# Adjust factor levels based on Proportion descending
resort_counts_df$Var1 <- factor(resort_counts_df$Var1,
                                levels = resort_counts_df$Var1[order(-resort_counts_df$Proportion)])

# Custom hover text
resort_counts_df$HoverText <-
  paste("City name: ", resort_counts_df$Var1,
        "<br>Number of people visiting this city:", resort_counts_df$Freq,
        "/", sum(resort_counts_df$Freq),
        "<br>Proportion of people visiting this city:",
        scales::percent(resort_counts_df$Proportion))

# Plot as a bar plot
plot_ly(resort_counts_df,
        x = ~Var1,
        y = ~Proportion,
        type = 'bar',
        text = "",
        hoverinfo = 'text',
        hovertext = ~HoverText,
        textposition = 'auto') %>%
  config(modeBarButtonsToRemove = c('pan2d', 'select2d', 'lasso2d', 'zoomIn2d',
                                    'zoomOut2d', 'autoScale2d', 'resetScale2d',
                                    'hoverClosestCartesian', 
                                    'hoverCompareCartesian',
                                    'toggleSpikelines', 'zoom')) %>%
  layout(title = 'Most Popular Destinations (City)',
         xaxis = list(title = 'City',
                      showgrid = FALSE,
                      zeroline = FALSE,
                      tickangle = 45),
         yaxis = list(title = 'Proportion',
                      showgrid = TRUE,
                      zeroline = FALSE),
         hovermode = 'x')
```

```{r Most Popular District destinations, echo = FALSE}
resort_counts <- table(data$F105_OrgCode)
accommodation_counts <- table(data$F125_ENG)

# Proportion
resort_counts_df <- as.data.frame(resort_counts)
resort_counts_df$Proportion <- (resort_counts_df$Freq / sum(resort_counts_df$Freq))

# Adjust factor levels based on Proportion descending
resort_counts_df$Var1 <- factor(resort_counts_df$Var1, levels = resort_counts_df$Var1[order(-resort_counts_df$Proportion)])

# Custom hover text
resort_counts_df$HoverText <-
  paste("District name: ", resort_counts_df$Var1,
        "<br>Number of people visiting this district:", resort_counts_df$Freq,
        "/", sum(resort_counts_df$Freq),
        "<br>Proportion of people visiting this district:",
        scales::percent(resort_counts_df$Proportion))

# Plot as a bar plot
plot_ly(resort_counts_df,
        x = ~Var1,
        y = ~Proportion,
        type = 'bar',
        text = "",
        hoverinfo = 'text',
        hovertext = ~HoverText,
        textposition = 'auto') %>%
  config(modeBarButtonsToRemove = c('pan2d', 'select2d', 'lasso2d', 'zoomIn2d',
                                    'zoomOut2d', 'autoScale2d', 'resetScale2d',
                                    'hoverClosestCartesian', 
                                    'hoverCompareCartesian',
                                    'toggleSpikelines', 'zoom')) %>%
  layout(title = 'Most Popular Destinations (District)',
         xaxis = list(title = 'District',
                      showgrid = FALSE,
                      zeroline = FALSE),
         yaxis = list(title = 'Proportion',
                      showgrid = TRUE,
                      zeroline = FALSE),
         hovermode = 'closest')
```

As we can see, out of the `r n_distinct(data$F105_Code)` city surveyed in the `r n_distinct(data$F105_OrgCode)` district, the most popular district is `r resort_counts_df$Var1[order(-resort_counts_df$Proportion)][1]`. This is not really suprising because of the way the data was collected. More people were surveyed in these city/districts than other smaller one. It is still interesting to have a look to keep this in mind.

## Hotels Stars
Now, let's have a look at the hotel standing of the places where the people stayed. This will highlight the quality of the stay per district.

```{r Assign numeric value to the stars, echo = FALSE}
data <- data %>% 
  mutate(F130_num = case_when(
    F130 == "*****" ~ 5,
    F130 == "****" ~ 4,
    F130 == "***" ~ 3,
    F130 == "**" ~ 2,
    F130 == "*" ~ 1,
    TRUE ~ NA_real_
  ))
```

### Average Stars per District
```{r Average Stars per City, echo = FALSE, warning = FALSE}
# Calculation of the average of F130_num by F105_OrgCode, ordered by average
average_per_city <- data %>%
  group_by(F105_OrgCode) %>%
  summarise(Average_F130_num = round(mean(F130_num, na.rm = TRUE), digits=2)) %>%
  arrange(desc(Average_F130_num))

# Create ordered cities list for plotly
ordered_cities <- average_per_city$F105_OrgCode

# Calculate the number of observations per city (F105_OrgCode)
observations_per_district <- data %>%
  group_by(F105_OrgCode) %>%
  summarise(Count = n())

# Join datasets to ensure alignment
combined_data <- left_join(average_per_city,
                           observations_per_district,
                           by = "F105_OrgCode")

# Custom hover text
combined_data$HoverText <-
  paste("District name: ", combined_data$F105_OrgCode,
        "<br>Average Stars:", combined_data$Average_F130_num,
        "<br>Number of people visiting this district:", combined_data$Count,
        "/", sum(combined_data$Count))

# Creation of the plotly
plot_ly(combined_data,
        x = ~F105_OrgCode,
        y = ~Average_F130_num,
        type = 'bar',
        text = "",
        hoverinfo = 'text',
        hovertext = ~HoverText,
        name = 'Average Stars') %>%
  config(modeBarButtonsToRemove = c('pan2d', 'select2d', 'lasso2d', 'zoomIn2d',
                                    'zoomOut2d', 'autoScale2d', 'resetScale2d',
                                    'hoverClosestCartesian', 
                                    'hoverCompareCartesian',
                                    'toggleSpikelines', 'zoom')) %>%
  layout(title = "Average Stars per District",
         xaxis = list(title = "City",
                      type = "category",
                      categoryorder = "array",
                      categoryarray = ordered_cities),
         yaxis = list(title = "Average Stars"),
         hovermode = "closest") 
```

As we can see on the graph above, the best average is optain in `r combined_data$F105_OrgCode[1]` with an average of `r combined_data$Average_F130_num[1]` stars. But this statistics is not very representative to the reality. Only `r combined_data$Count[1]` people answered the survey in this district which is not enough to have a good idea of the quality of the hotels in this district. The second best region after 
`r combined_data$F105_OrgCode[1]` is `r combined_data$F105_OrgCode[2]` with an average of `r combined_data$Average_F130_num[2]` stars. This district got with `r combined_data$Count[2]` observation which is more representative. This high score for the Region of `r combined_data$F105_OrgCode[2]` is not really surprising given the fact that this place is well know for its luxury hotels.

### Distribution of Stars by District
```{r Distribution of Stars by City, echo = FALSE, warning = FALSE}
# Filtering to exclude cities with no valid data in F130_num
data_filtered <- data %>%
  filter(!is.na(F130_num)) %>%
  group_by(F105_OrgCode) %>%
  # Calculate the average to ensure we only include cities with data
  summarise(Average_F130_num = mean(F130_num, na.rm = TRUE)) %>%
  filter(!is.na(Average_F130_num)) %>%
  arrange(desc(Average_F130_num))

# Reorder the F105_Code factor in the filtered dataframe according to the calculated averages
data$F105_Code <- factor(data$F105_OrgCode, levels = data_filtered$F105_OrgCode)

# Ensure that the original dataframe is filtered to match the selected cities
data <- data %>%
  filter(F105_OrgCode %in% data_filtered$F105_OrgCode)

# Create the chart with geom_density_ridges_gradient for cities with valid data in F130_num
ggplot(data, aes(x = F130_num, y = F105_OrgCode, fill = ..x..)) +
  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
  scale_fill_viridis_c(option = "C") +
  labs(title = "Distribution of F130_num by City with Gradient",
       x = "F130_num",
       y = "District") +
  theme_ridges() + theme(legend.position = "none")
```
