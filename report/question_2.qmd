---
format:
  html:
    code-fold: true
---

# Question 2

**Where are from the people coming in the canton of Vaud? What kind of trip are they doing?**

```{r output = FALSE}
source(here::here("scripts", "setup.R"))
data <- read.csv(here("data", "TMS_dataset_Vaud_20240314_FINAL.csv"),
                 sep = ",")
```

### Data Exploration: Who is coming? 

**Global percentage of people coming in Switzerland per continent**

```{r}
### F05_01.ENG ###
#nb of occurrences by country and continents 
OccurencesCountry <- data %>% 
  group_by(data$F05_02_ENG) %>% 
  count(sort = TRUE)

OccurencesContinent <- data %>% 
  group_by(data$F05_01_ENG) %>% 
  count(sort = TRUE)

#Continent in percentages
F05_01_PCT <- data %>% 
  group_by(F05_01_ENG) %>%
  summarise(Count = n()) %>%
  mutate(Percentage = Count / sum(Count) * 100) %>% 
  arrange(desc(Percentage))

datatable(F05_01_PCT, options = list(pageLength = 10,
                                   class = "hover",
                                   searchHighlight = TRUE), rownames = FALSE) 
```

```{r}
#plot numbers continent 
ggplot(F05_01_PCT, aes(x=reorder(F05_01_ENG, Percentage), y=Percentage, fill=F05_01_ENG)) +
  geom_bar(stat="identity") +
  coord_flip() +  # Flip coordinates for horizontal bars
  theme_minimal() +
  labs(x="Continents", y="Percentage", title="Percentage of Each Unique Continent") +
  theme(legend.title = element_blank(), # Remove the legend title
        legend.position = "none", # Hide the legend as the colors are not necessary with labels
        plot.title = element_text(hjust = 0.5), # Center the plot title
        axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotate x-axis labels for readability
  geom_text(aes(label=sprintf("%.2f%%", Percentage)), position=position_dodge(width=0.9), vjust=-0.25) # Add percentage labels

```

```{r}
# Assuming 'F05_01_PCT' contains continent data and 'F05_02_PCT' contains country data
# Let's merge the country percentages into the continent data frame.
# Ensure that both data frames have a common identifier for continents. Adjust 'by' as needed.

# Creating a country percentage by continent
F05_02_PCT <- data %>%
  group_by(F05_01_ENG, F05_02_ENG) %>%  # Group by both continent and country
  summarise(Count = n(), .groups = "drop") %>%
  mutate(Percentage = Count / sum(Count) * 100) %>%
  arrange(desc(Percentage))

# Merge country data back to continent data
combined_data <- merge(F05_01_PCT, F05_02_PCT, by="F05_01_ENG", all.x = TRUE)

# Now create the horizontal stacked bar plot
ggplot(combined_data, aes(x=reorder(F05_01_ENG, -Percentage.y), y=Percentage.y, fill=F05_02_ENG)) +
  geom_bar(stat="identity") +
  coord_flip() +  # Flip coordinates for horizontal bars
  theme_minimal() +
  labs(x="Continents", y="Percentage", title="Percentage of Each Country by Continent") +
  theme(legend.position = "none",
    legend.title = element_text(size=0),
        legend.text = element_text(size = 0),# Add legend title if needed
        plot.title = element_text(hjust = 0.5), # Center the plot title
        axis.text.y = element_text(angle = 0, hjust = 1)) + # Adjust text angle and justification
  geom_text(aes(label=sprintf("%.2f%%", Percentage.y)), position=position_stack(vjust=0.5))  # Add percentage labels inside the bars
```

```{r}
# # trying the shiny for this plot


#Add a column continent to F05_02_ENG

# # UI
# ui <- fluidPage(
#   titlePanel("Interactive Continent/Country Percentage Plot"),
#   sidebarLayout(
#     sidebarPanel(
#       helpText("Displays the percentage of each country by continent.")
#     ),
#     mainPanel(
#       plotOutput("stackedPlot")
#     )
#   )
# )
# 
# # Server
# server <- function(input, output) {
# 
#   output$stackedPlot <- renderPlot({
#     # Merge the datasets on the continent identifier, F05_01_ENG
#     combined_data <- merge(F05_01_PCT, F05_02_PCT, by="F05_01_ENG")
# 
#     ggplot(combined_data, aes(x=reorder(F05_01_ENG, -Country_Percentage), y=Country_Percentage, fill=F05_02_ENG)) +
#       geom_bar(stat="identity") +
#       coord_flip() +  # Flip coordinates for horizontal bars
#       theme_minimal() +
#       labs(x="Continents", y="Percentage", title="Percentage of Each Country by Continent") +
#       theme(legend.position = "none", # Hide the legend
#             plot.title = element_text(hjust = 0.5), # Center the plot title
#             axis.text.y = element_text(angle = 0, hjust = 1)) + # Adjust text angle and justification
#       geom_text(aes(label=sprintf("%.2f%%", Country_Percentage)), position=position_stack(vjust=0.5))  # Add percentage labels inside the bars
#   })
# }
# 
# # Run the application 
# shinyApp(ui = ui, server = server)
```

**Global percentage of people coming in Switzerland per country of origin**

```{r}

# Countries in percentages 
F05_02_PCT <- data %>% 
  group_by(F05_02_ENG) %>%
  summarise(Count = n()) %>%
  mutate(Percentage = Count / sum(Count) * 100) %>% 
  arrange(desc(Percentage))

datatable(F05_02_PCT, options = list(pageLength = 10,
                                   class = "hover",
                                   searchHighlight = TRUE), rownames = FALSE)

#add continent next to each country
#or merge continent and country table. 1st column continents, 2nd countries, # of occurences then percentage
```

**Ratio of each country of origin over the total number of visitors surveyed per city**

```{r}
# #total number of tourist per city
# numbertouristpercity <- data %>%
#   group_by(F105_Code) %>%
#   count(sort = TRUE)
#   
# #ratio of nationality per city
# <- data %>% 
#   group_by(F105_Code) %>%
#   summarise(Count = n()) %>%
#   mutate(Percentage = Count / sum(Count) * 100) %>% 
#   arrange(desc(Percentage))

# Counting the number of tourists by city and nationality
tourists_by_nationality <- data %>%
  group_by(F105_Code, F05_02_ENG) %>%
  summarise(Count = n(), .groups = 'drop')

# Calculating the total number of tourists per city
total_tourists_per_city <- tourists_by_nationality %>%
  group_by(F105_Code) %>%
  summarise(TotalCount = sum(Count), .groups = 'drop')

# Joining the counts back to the detailed breakdown and calculating the ratio
nationality_ratio_per_city <- tourists_by_nationality %>%
  left_join(total_tourists_per_city, by = "F105_Code") %>%
  mutate(Ratio = Count / TotalCount) %>%
  select(F105_Code, F05_02_ENG, Ratio)

datatable(nationality_ratio_per_city, options = list(pageLength = 10,
                                   class = "hover",
                                   searchHighlight = TRUE), rownames = FALSE)

# stacked bar plot with cities on y and % on x and fill = % nationalities per city relatively to the number of tourist who visited the city 
# faire un graph par continent ? (beaucoup de villes )
```

**Ratio of each country of origin relatively to the number of tourist surveyed in each district**

```{r}
#ratio of each nationality relatively to the number of tourist surveyed in each district F105_OrgCode
tourists_by_nationality <- data %>%
  group_by(F105_OrgCode, F05_02_ENG) %>%
  summarise(Count = n(), .groups = 'drop')

# Calculating the total number of tourists per city
total_tourists_per_city <- tourists_by_nationality %>%
  group_by(F105_OrgCode) %>%
  summarise(TotalCount = sum(Count), .groups = 'drop')

# Joining the counts back to the detailed breakdown and calculating the ratio
nationality_ratio_per_city <- tourists_by_nationality %>%
  left_join(total_tourists_per_city, by = "F105_OrgCode") %>%
  mutate(Ratio = Count / TotalCount) %>%
  select(F105_OrgCode, F05_02_ENG, Ratio)

datatable(nationality_ratio_per_city, options = list(pageLength = 10,
                                   class = "hover",
                                   searchHighlight = TRUE), rownames = FALSE)

```


```{r}

## Séparation cantons suisse-allemands 

# # Swiss german column
# 
# unique(data[data$F05_02 == "Schweiz", ]$F05_03)
# 
# swiss_german_cantons = c("Luzern", "Schwyz", "Bern", "Neuenburg", "Aargau",
#                          "Zürich", "Basel-Stadt", "Basel-Landschaft", "Obwalden",
#                          "Appenzell Innerrhoden", "Schaffhausen", "Thurgau",
#                          "St. Gallen", "Solothurn", "Uri", "Zug", "Nidwalden",
#                          "Appenzell Ausserrhoden")
# 
# 
# # Binary column for swiss germans
# data$swiss_german <- ifelse(data$F05_02 == "Schweiz" & data$F05_03 %in% swiss_german_cantons, 1, 0)
```



```{r}

# stacked bar plot with cities on y and % on x and fill = % nationalities per city relatively to the number of tourist who visited the city 

# Create the bar chart
# Create the bar chart
# ggplot(nationality_ratio_per_city, aes(x = Ratio, y = F105_Code)) +
#   geom_bar(stat = "identity") +
#   labs(x = "Percentage", y = "City", title = "Percentage of Tourists by City") +
#   theme_minimal()


```

```{r}

## trying to add percentage country of origin visitors relatively to each district on leaflet


# # Assume 'F105_Code' is your city code and maps directly to 'leaflet_districts'
# # Add district info to nationality ratios
# nationality_with_districts <- nationality_ratio_per_city %>%
#   left_join(data %>% select(F105_Code, leaflet_districts), by = "F105_Code")
# 
# # Aggregate nationality data by district
# district_nationality_ratios <- nationality_with_districts %>%
#   group_by(leaflet_districts, F05_02_ENG) %>%
#   summarise(AverageRatio = mean(Ratio), .groups = 'drop') %>%
#   mutate(Label = paste(F05_02_ENG, ":", round(AverageRatio * 100, 2), "%")) %>%
#   group_by(leaflet_districts) %>%
#   summarise(AllLabels = paste(Label, collapse = "\n"))
# 
# # Join with geographic data
# vaud <- vaud %>%
#   left_join(district_nationality_ratios, by = c("NAME" = "leaflet_districts"))
# 
# # Assuming AverageRatio is correctly calculated and added
# palette <- colorNumeric(palette = "Blues", domain = range(vaud$AverageRatio, na.rm = TRUE))
# 
# # Create a Leaflet map
# leaflet(vaud) %>%
#   addTiles() %>%
#   setView(lng = 6.63, lat = 46.51, zoom = 9) %>%
#   addPolygons(
#     fillOpacity = 0.75, color = ~palette(AverageRatio),
#     weight = 1,
#     popup = ~AllLabels
#   )
# 
# 
# 
# 
# # If AverageRatio is not listed, ensure it is being calculated correctly
# district_nationality_ratios <- nationality_with_districts %>%
#   group_by(leaflet_districts, F05_02_ENG) %>%
#   summarise(AverageRatio = mean(Ratio, na.rm = TRUE), .groups = 'drop') %>%
#   mutate(Label = paste(F05_02_ENG, ":", round(AverageRatio * 100, 2), "%")) %>%
#   group_by(leaflet_districts) %>%
#   summarise(AllLabels = paste(Label, collapse = "\n"))
# 
# # Make sure that the column names used in the join are correct
# colnames(vaud)
# colnames(district_nationality_ratios)
# 
# # Correct the join statement
# vaud <- vaud %>%
#   left_join(district_nationality_ratios, by = c("NAME" = "leaflet_districts"))
# 
# # Check for AverageRatio in vaud
# if("AverageRatio" %in% colnames(vaud)) {
#   print("AverageRatio is present")
# } else {
#   print("AverageRatio is missing")
# }
# 
# # Adjust palette creation
# if("AverageRatio" %in% colnames(vaud)) {
#   palette <- colorNumeric(palette = "Blues", domain = range(vaud$AverageRatio, na.rm = TRUE))
# } else {
#   palette <- colorNumeric(palette = "Blues", domain = c(0, 1))  # Default or fallback range
# }
# 
# # Create the Leaflet map
# leaflet(vaud) %>%
#   addTiles() %>%
#   setView(lng = 6.63, lat = 46.51, zoom = 9) %>%
#   addPolygons(
#     fillOpacity = 0.75, color = ~palette(AverageRatio),
#     weight = 1,
#     popup = ~AllLabels
#   )
# 
# 
# 
# # Example to combine columns if necessary (adjust as needed based on content)
# vaud$AllLabels <- apply(vaud[, grep("AllLabels", colnames(vaud))], 1, function(x) paste(na.omit(x), collapse = " "))
# 
# # Drop the old AllLabels.x.x columns
# vaud <- vaud %>%
#   select(-matches("AllLabels.[0-9]+"))
# 
# # Check the new AllLabels column
# head(vaud$AllLabels)
# 
# # Set up a simple color palette if no AverageRatio is available
# palette <- colorNumeric(palette = "Blues", domain = c(0, 1))
# 
# # Create the Leaflet map using vaud2
# leaflet(vaud) %>%
#   addTiles() %>%
#   setView(lng = 6.63, lat = 46.51, zoom = 9) %>%
#   addPolygons(
#     fillOpacity = 0.75, color = ~palette(1),  # Uniform color as no AverageRatio is available
#     weight = 1,
#     popup = ~AllLabels
#   )
# 



```


```{r, fig.width=10, fig.height=20}
### F05_02_ENG ###
#plot with continents 
F05_02_PCT <- data %>%
  group_by(F05_02_ENG, F05_01_ENG) %>%  # Group by both country and continent
  summarise(Count = n(), .groups = 'drop') %>%
  mutate(Percentage = Count / sum(Count) * 100) %>%
  arrange(desc(Percentage))

ggplot(F05_02_PCT, aes(x = reorder(`F05_02_ENG`, Percentage), y = Percentage, fill = `F05_01_ENG`)) + 
  geom_bar(stat = "identity") +
  coord_flip() +  # Make the plot horizontal
  scale_fill_brewer(palette = "Set3", name = "Continent") +  # Use a color palette for continents
  theme_minimal() +
  labs(x = "Country", y = "Percentage", title = "Percentage of Responses by Country and Continent") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9), 
        axis.text.y = element_text(angle = 45, hjust = 1, size = 9),
        plot.title = element_text(hjust = 0.5),
        legend.position = "right") +  # Adjust legend position
  geom_text(aes(label=sprintf("%.2f%%", Percentage)), position=position_stack(vjust=0.5))
```

```{r, message = FALSE, warning = FALSE}
### F12 & F13 ###
#Are we more interested in knowing when they came for holidays or how long?

#duration per month 
data <- data %>%
  mutate(
    # Convert to date format first
    date_column = dmy(F12),
    # If you want the month names instead
    month_name_column = month(date_column, label = TRUE, abbr = FALSE) # Set abbr=FALSE for full month names
  )

#order
desired_order <- c("Serial2",
                    "F05_01",
                    "F05_01_ENG",
                    "F05_02",
                    "F05_02_ENG",
                    "F05_03",
                    "F05_04",
                    "F12",
                    "F13",
                    "month_name_column",
                   "hFerienDauer")
remaining_columns <- setdiff(names(data), desired_order)
new_order <- c(desired_order, remaining_columns)
data <- data[, new_order]

# nb of days per month 
nb_days_per_month <- data %>%
  select(F12, F13, month_name_column, hFerienDauer) %>%
  group_by(month_name_column) %>%
  summarize(total_hFerienDauer = sum(hFerienDauer, na.rm = TRUE))

nb_days_per_month <- nb_days_per_month %>%
  mutate(season = case_when(
    month_name_column %in% c("December", "January", "February") ~ "Winter",
    month_name_column %in% c("March", "April", "May") ~ "Spring",
    month_name_column %in% c("June", "July", "August") ~ "Summer",
    month_name_column %in% c("September", "October", "November") ~ "Fall",
    TRUE ~ NA_character_ # for any month names not matched or NA values
  ))

#plot
ggplot(nb_days_per_month, aes(x = month_name_column, y = total_hFerienDauer, fill = season)) +
  geom_bar(stat = "identity") +
  geom_smooth(aes(group = 1), method = "loess", se = FALSE, color = "red", linetype = "dashed") +
  scale_fill_manual(values = c("Winter" = "blue", "Spring" = "green", "Summer" = "purple", "Fall" = "orange")) +
  theme_minimal() +
  labs(x = "Months", y = "Sum Holiday Durations", title = "Total Holiday Duration by Month", fill = "Season") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r, message=FALSE}
### F16 ### 

# do a tableau with the percentage of each trip option per nationality 
trip_counts <- data %>%
  group_by(F05_02_ENG, F16_ENG) %>%
  summarise(count = n()) %>%
  ungroup()

# Calculate total counts per nationality
nationality_totals <- trip_counts %>%
  group_by(F05_02_ENG) %>%
  summarise(total_count = sum(count))

# Join the trip counts with the total counts per nationality
trip_percentages <- trip_counts %>%
  left_join(nationality_totals, by = "F05_02_ENG") %>%
  mutate(percentage = (count / total_count) * 100) %>% 
  select(-c(count, total_count))

datatable(trip_percentages, options = list(pageLength = 10,
                                   class = "hover",
                                   searchHighlight = TRUE), rownames = FALSE) 

#plot

my_colors <- c("Holidays with only one overnight stay in Switzerland" = "#FF9999",
"Round trip only within Switzerland (several overnight locations in Switzerland)" = "#9999FF",
"Round trip through Europe: only one overnight stay in Switzerland" = "#66CC99",
"Round trip through Europe: several places to stay in Switzerland" = "#E69F00")

F16_Q <- data %>%
  count(F16_ENG, name = "total_options") %>%
  mutate(percentage = total_options / sum(total_options) * 100,
         label = sprintf("%.1f%%", percentage)) 

# Use ggplot2 to create the pie chart
ggplot(F16_Q, aes(x = "", y = percentage, fill = F16_ENG)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) + 
  theme_void() +
  scale_fill_manual(values = my_colors) + # Use your defined colors here
  geom_text(aes(label = percentage), position = position_stack(vjust = 0.5)) +
  ggtitle("Global Percentage Distribution of Type of Trips") 

```

```{r, fig.width=15, fig.height=10}

ggplot(trip_percentages, aes(x = F05_02_ENG, y = percentage, fill = F16_ENG)) +
  geom_bar(stat = "identity") +
  labs(x = "Country", y = "Percentage", fill = "Type of Trip") +
  ggtitle("Stacked Bar Plot of Type of Trip by Country") +
  scale_fill_manual(values = my_colors) + # Use your defined colors here
  theme_minimal() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
        axis.text.y = element_text(hjust = 1, size = 8),
        legend.position = "top",
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 0),
        legend.box = "vertical")

```

```{r, message = FALSE, warning = FALSE}
### F20 ###
# Careful here: some people have 0 nightstay and only passed by switzerland for a day. 
# but answered the question 16, asking about the number of nights.
# also when f16 answered and F20 blanc, drop observations? 
F20_freq <- data %>%
  group_by(F20) %>%
  summarize(Count = n(), .groups = 'drop') %>%
  arrange(desc(Count)) # Optional: arrange in descending order of frequency

ggplot(F20_freq, aes(x = F20, y = Count, fill = F20)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(x = "Number of nights", y = "Frequency", title = "Frequency of the number of nights in Switzerland") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), # Improve readability of x-axis labels
        legend.title = element_blank()) # Hide the legend if not needed


# frequency nightstays distribution per city 
distr_nightstays_per_district <- data %>% 
  select(F105_OrgCode, F20) %>%
  group_by(F105_OrgCode) # %>% drop_na()

distr_nightstays_per_district$F20[is.na(distr_nightstays_per_district$F20)] <- 0

# Adjust the plot theme for better readability
my_theme <- theme_minimal() +
  theme(
    text = element_text(size = 12),  # Adjust text size
    panel.grid.major = element_blank(),  # Remove major gridlines
    panel.grid.minor = element_blank(),  # Remove minor gridlines
    panel.border = element_blank(),  # Remove plot border
    axis.line = element_line(color = "black"),  # Add axis lines
    legend.position = "bottom")  # Move legend to bottom
    
# Plotting the density ridgeline plot
ggplot(distr_nightstays_per_district, aes(x = F20, y = F105_OrgCode, group = F105_OrgCode)) + 
  geom_density_ridges(fill = "#00AFBB", color = "white", alpha = 0.8) + 
  scale_x_continuous(labels = scales::comma) +
  labs(
    x = "Number of Nights",  # Adjust x-axis label
    y = "City",  # Adjust y-axis label
    title = "Density Plot of Night Stays per District",  # Add plot title
    subtitle = "Distribution of night stays across different Districts",  # Add plot subtitle
    caption = "Source: Your Dataset"  # Add data source caption
  )

## here I kept the NAs as they represent a big part of the answers for this question.
## means that most of the people coming in Switzerland would stay less than 1 night in Switzerland 
```

```{r}
library(ggplot2)
library(dplyr)

# Assuming 'data' is your dataframe, 'F20' is the number of nights, and 'F105_orgCode' is the district code
F20_freq <- data %>%
  group_by(F20, F105_OrgCode) %>%
  summarize(Count = n(), .groups = 'drop') %>%
  arrange(desc(Count))  # Arranges in descending order of frequency

# Plotting with ggplot2
ggplot(F20_freq, aes(x = F20, y = Count, fill = F105_OrgCode)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(x = "Number of nights", y = "Frequency", title = "Frequency of the number of nights in Switzerland by District") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), # Improve readability of x-axis labels
        legend.title = element_blank(), # Hide the legend title
        legend.position = "bottom") # Position legend at the bottom

# Note: If district codes are many and make the plot crowded or unreadable, consider grouping small categories or using facet_wrap() for a clearer presentation.

```

```{r}
library(ggplot2)
library(dplyr)

# Assuming 'data' is your data frame, 'F20' is the number of nights, and 'F105_orgCode' is the district code
F20_freq <- data %>%
  group_by(F20, F105_OrgCode) %>%
  summarize(Count = n(), .groups = 'drop') %>%
  arrange(F105_OrgCode, desc(Count))  # Arranges primarily by district and then in descending order of frequency

# Plotting with ggplot2 using facet_wrap to create a separate plot for each district
ggplot(F20_freq, aes(x = F20, y = Count, fill = F20)) +
  geom_bar(stat = "identity") +
  facet_wrap(~ F105_OrgCode, scales = "free_y") +  # Free scales can adjust if district frequencies vary significantly
  theme_minimal() +
  labs(x = "Number of nights", y = "Frequency", title = "Frequency of the number of nights in Switzerland by District") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), # Improve readability of x-axis labels
        legend.title = element_blank()) # Hide the legend title if it's not needed

# Adjust further to improve plot appearance or readability as necessary

```

```{r, message = FALSE, warning = FALSE}
### F21 ###
#consider NA as 0 here. 

# if F20 and F21 not NAs --> take percentage of nightstays in Switzerland compared to the total length of the trip

# Add a new column with the percentage of night stays in Switzerland over the total trip night stays
data <- data %>%
  mutate(Percentage_Night_Stays_Switzerland = ifelse(is.na(F20) | is.na(F21), NA, (F20 / F21) * 100))

ratio_nightstays_CH_EU <- data %>% 
    select(F20,F21, Percentage_Night_Stays_Switzerland) %>%
    group_by() %>% 
    drop_na()

# Create the distribution histogram
ggplot(ratio_nightstays_CH_EU, aes(x = Percentage_Night_Stays_Switzerland)) +
  geom_histogram(binwidth = 10, fill = "skyblue", color = "black") +
  labs(
    title = "Distribution of the percentage of nightstays in Switzerland over the whole trip",
    x = "Percentage Night Stays",
    y = "Frequency"
  ) +
  theme_minimal()


F21_EU_locations <- data %>%
  group_by(F21) %>%
  summarize(Count = n(), .groups = 'drop') %>%
  arrange(desc(Count)) # Optional: arrange in descending order of frequency

ggplot(F21_EU_locations, aes(x = F21, y = Count, fill = F21)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(x = "Number of nights in EU", y = "Frequency", title = "Frequency of the number of nights in EU") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), # Improve readability of x-axis labels
        legend.title = element_blank()) # Hide the legend if not needed
```

```{r}
### F30 ###
F30_Q <- data %>% count(F30_ENG, name = "Total")
F30_Q$percentage <- with(F30_Q, Total / sum(Total) * 100)

ggplot(F30_Q, aes(x = F30_ENG, y = Total, label = paste(percentage, "%"))) +
  geom_bar(stat = "identity", fill = "skyblue") +
  geom_text(vjust = -0.5, color = "black") +
  theme_minimal() +
  labs(title = "Q30: Have you booked a package tour?",
       x = "Answers",
       y = "Total")
```

```{r, fig.height=15}
### Deeper reasoning ###

# Where are coming from the people, per month

# Summarize data: count arrivals per month and country
monthly_arrivals <- data %>%
  group_by(month_name_column, F05_02_ENG) %>%
  summarise(Count = n(), .groups = 'drop') %>%
  arrange(month_name_column, F05_02_ENG) # This will ensure the data is ordered, which might help in visualization

# Visualize
ggplot(monthly_arrivals, aes(x = month_name_column, y = `F05_02_ENG`, size = Count)) +
  geom_point(alpha = 0.7) + # Using alpha for better visibility if points overlap
  theme_minimal() +
  labs(title = "Monthly Arrivals in Switzerland by Country of Origin",
       x = "Month",
       y = "Country of Origin",
       size = "Number of Arrivals") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

::: panel-tabset

## titre

```{r}

```

:::
