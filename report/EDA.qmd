---
format:
  html:
    code-fold: true
    fig-align: center
---

# EDA

# Partie Stefan

```{r output = FALSE, echo =FALSE}
source(here::here("scripts", "setup.R"))
data <- read.csv(here("data", "TMS_dataset_Vaud_20240314_FINAL.csv"),
                 sep = ",")
```

### Data Exploration: Who is coming? 


**Global percentage of people coming in the canton of Vaud per continent**

With the data gathered from the survey, we have first explored the overall distribution of nationalities of the visitors. Therefore, you will find here a table and a graph providing the frequency per nationality and the percentage of nationality it represents. 

```{r}
### F05_01.ENG ###
#nb of occurrences by country and continents 
OccurencesCountry <- data %>% 
  group_by(data$F05_02_ENG) %>% 
  count(sort = TRUE)
OccurencesContinent <- data %>% 
  group_by(data$F05_01_ENG) %>% 
  count(sort = TRUE)

#Continent in percentages
F05_01_PCT <- data %>% 
  group_by(F05_01_ENG) %>%
  summarise(Count = n()) %>%
  mutate(Percentage = Count / sum(Count) * 100) %>% 
  arrange(desc(Percentage)) %>%
  mutate(Percentages = round(Percentage, 2)) %>%
  select(-c(Percentage)) %>%
  rename(Continent_of_origin = F05_01_ENG)

datatable(F05_01_PCT, options = list(pageLength = 10,
                                   class = "hover",
                                   searchHighlight = TRUE), rownames = FALSE)

```

```{r, warning=FALSE, out.height="100%", out.width="100%", fig.width=7 }
#plot numbers continent 

ggplot(F05_01_PCT, aes(x=reorder(Continent_of_origin, Percentages), y=Percentages, fill=Continent_of_origin)) +
  geom_bar(stat="identity") +
  coord_flip() +  # Flip coordinates for horizontal bars
  theme_minimal() +
  labs(x="Continents of origin", y="Percentages", title="Percentages of Each Unique Continent of origin") +
  theme(legend.title = element_blank(), # Remove the legend title
        legend.position = "none", # Hide the legend as the colors are not necessary with labels
        plot.title = element_text(hjust = 0.5), # Center the plot title
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  geom_text(aes(label=sprintf("%.2f%%", Percentages)), position=position_dodge(width=-0.5), vjust=-0.01, hjust=-0.1, size = 3) + # Add percentage labels
  ylim(0, 90)  # Extend y-axis range

```

We notice that a large part of the people surveyed were coming from Europe (approx. 78%), followed by people coming from Asia (approx. 8%), North and Central America (approx. 8%), South America (approx. 3%) Australia and Oceania (approx. 2%) and finally Africa (approx. 1%). Again, these results were concerning the whole canton.


**Global percentage of people coming in canton of Vaud per country of origin**

We have then decided to explore the distribution, in frequency and percentage, of the nationalities per continent. You will find here again a table and a graph, summarizing this information:

```{r}

# Countries in percentages 
F05_02_PCT <- data %>% 
  group_by(F05_02_ENG) %>%
  summarise(Count = n()) %>%
  mutate(Percentage = round((Count / sum(Count) * 100),2)) %>% 
  arrange(desc(Percentage)) %>%
  rename(Country_of_origin = F05_02_ENG)

datatable(F05_02_PCT, options = list(pageLength = 10,
                                   class = "hover",
                                   searchHighlight = TRUE), rownames = FALSE)
```

```{r, fig.width=10, fig.height=10}
### F05_02_ENG ###
#plot with continents 
F05_02_PCT <- data %>%
  group_by(F05_02_ENG, F05_01_ENG) %>%  # Group by both country and continent
  summarise(Count = n(), .groups = 'drop') %>%
  mutate(Percentage = round((Count / sum(Count) * 100),2)) %>%
  arrange(desc(Percentage)) 



#concatenate all countries except " 7 best " 
F05_02_PCT <- F05_02_PCT %>% add_row(F05_01_ENG = "Other Continents", F05_02_ENG = "Other Countries", Count = sum(F05_02_PCT$Count[7:104]), Percentage = sum(F05_02_PCT$Percentage[7:104]))

#get rid of the rest of the rows
F05_02_PCT <- F05_02_PCT[-(8:104),]

#plot
ggplot(F05_02_PCT, aes(x = reorder(`F05_02_ENG`, Percentage), y = Percentage, fill = `F05_01_ENG`)) + 
  geom_bar(stat = "identity") +
  coord_flip() +  # Make the plot horizontal
  scale_fill_brewer(palette = "Set3", name = "Continent") +  # Use a color palette for continents
  theme_minimal() +
  labs(x = "Country of Origin", y = "Percentages", title = "Percentage of Responses by Country and Continent of origin") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9), 
        axis.text.y = element_text(angle = 45, hjust = 1, size = 9),
        plot.title = element_text(hjust = 0.5),
        legend.position = "right") +  # Adjust legend position
  geom_text(aes(label=sprintf("%.2f%%", Percentage)), position=position_stack(vjust=0.5))
```

For visibility purpose, we have decided to represent here in the graph the top 7 countries of the table, representing all above 3% of the nationalities found in the survey. We have then decided to group the  remaining countries in the category "Other Countries". 

We notice that Switzerland is the nationality the most represented among all the visitor (approx. 31.5%). Therefore, there are a lot of Swiss citizens travelling in their own country for various purpose to the canton of Vaud. Also, we see again that the most represented nationalities are Europeans, such as France (approx. 14.5%), United Kingdom (appox. 7.5%), Germany (approx. 5.5%), Belgium (approx. 3.5%) and finally Spain (approx. 3%). The only other nationality coming from a other continent represented here is the United States of America (approx. 5.5%). Proximity could be for instance one of the main factor explaining these results. 


**Per city, the percentage of each visitor's country of origin, relative to the number of visitor of the city**

Then, In order to know more about the precise destination of the visitors, we have decided to gather by city the percentage of country of origin. 

```{r}

# Counting the number of tourists by city and nationality
tourists_by_nationality <- data %>%
  group_by(F105_Code, F05_02_ENG) %>%
  summarise(Count = n(), .groups = 'drop')

# Calculating the total number of tourists per city
total_tourists_per_city <- tourists_by_nationality %>%
  group_by(F105_Code) %>%
  summarise(TotalCount = sum(Count), .groups = 'drop')

# Joining the counts back to the detailed breakdown and calculating the ratio
nationality_ratio_per_city <- tourists_by_nationality %>%
  left_join(total_tourists_per_city, by = "F105_Code") %>%
  mutate(Ratio = round((Count / TotalCount),3)) %>%
  select(F105_Code, F05_02_ENG, Ratio) %>%
  rename(City = F105_Code, Country_of_origin = F05_02_ENG)

datatable(nationality_ratio_per_city, options = list(pageLength = 10,
                                   class = "hover",
                                   searchHighlight = TRUE), rownames = FALSE)

```

The percentage here was in fact a ratio representing the number of people from one particular nationality over the total number of visitors in each city. Unfortunately, as very few data has been collected in some cities, the ratio of visitor from one nationality over all the visitor surveyed can be really large (up to 1, in point of percentage). On the other hand, as data from some other city gathered a lot of answers, we observe that some country of origin (e.g. Austria in Lausanne) were only accounting for 0.2% of the total visitors. 

**Ratio of each country of origin relatively to the number of tourist surveyed in each district**

In the same process, let's now explore the country of origin ratio per district of tourism.

```{r}
#ratio of each nationality relatively to the number of tourist surveyed in each district F105_OrgCode
tourists_by_nationality <- data %>%
  group_by(F105_OrgCode, F05_02_ENG) %>%
  summarise(Count = n(), .groups = 'drop')

# Calculating the total number of tourists per city
total_tourists_per_city <- tourists_by_nationality %>%
  group_by(F105_OrgCode) %>%
  summarise(TotalCount = sum(Count), .groups = 'drop')

# Joining the counts back to the detailed breakdown and calculating the ratio
nationality_ratio_per_city <- tourists_by_nationality %>%
  left_join(total_tourists_per_city, by = "F105_OrgCode") %>%
  mutate(Ratio = round((Count / TotalCount),3)) %>%
  select(F105_OrgCode, F05_02_ENG, Ratio) %>%
  rename(District_tourism = F105_OrgCode,Country_of_origin = F05_02_ENG)
  

datatable(nationality_ratio_per_city, options = list(pageLength = 10,
                                   class = "hover",
                                   searchHighlight = TRUE), rownames = FALSE)

```

Again, the low number of data available in our data don't allow us to get really satisfying results for every city surveyed. 

As Swiss citizens accounted for more than 30% of the visitors surveyed, we have decided to know more about the percentages of people coming from Switzerland, visiting Switzerland. Therefore, here is the distribution of visitors per canton of origin.

```{r}

## Séparation cantons suisse-allemands

 # Swiss german column

 # unique(data[data$F05_02 == "Schweiz", ]$F05_03)

 # Seratation german cantons (subjective)
 swiss_german_cantons = c("Luzern", "Schwyz", "Bern", "Neuenburg", "Aargau",
                          "Zürich", "Basel-Stadt", "Basel-Landschaft", "Obwalden",
                          "Appenzell Innerrhoden", "Schaffhausen", "Thurgau",
                          "St. Gallen", "Solothurn", "Uri", "Zug", "Nidwalden",
                          "Appenzell Ausserrhoden")

 # Binary column for swiss germans
 data$swiss_german <- ifelse(data$F05_02 == "Schweiz" & data$F05_03 %in% swiss_german_cantons, 1, 0)
 
 # count ratio from each german canton over the data
 Inside_Switzerland <- data %>% 
  select(F05_02_ENG, F05_03, swiss_german) %>%
  filter(F05_02_ENG == "Switzerland") %>%
  group_by(F05_03) %>%
  summarise(Count = n()) %>%
  mutate(Percentage = round((Count/sum(Count)) * 100, 1)) %>%
  #round(Percentage, 2) %>%
  rename(Canton = F05_03)

 
 datatable(Inside_Switzerland, options = list(pageLength = 10,
                                   class = "hover",
                                   searchHighlight = TRUE), rownames = FALSE)
```

As we can see on this table, the biggest part of the Swiss visitors surveyed in this study are people from Vaud (approx. 20%), Bern (approx. 16%) and Zurich (approx. 12%). 

Now among the swiss german cantons, let's explore the distribution of the canton

```{r}
# Now how much percentage do swiss germans represent in this
Swiss_germans_percentage <- Inside_Switzerland %>%
  filter(Canton %in% swiss_german_cantons) %>%
  mutate(Percentage = round((Count/sum(Count)) * 100, 1))

# sum(Swiss_germans_percentage$Percentage)
        
datatable(Swiss_germans_percentage, options = list(pageLength = 10,
                                   class = "hover",
                                   searchHighlight = TRUE), rownames = FALSE)

# Calculate counts for Swiss-German cantons and others
swiss_canton_summary <- data %>% 
  group_by(swiss_german) %>%
  summarise(Count = n()) %>%
  mutate(Total = sum(Count),
         Percentage = (Count / Total) * 100) %>%
  ungroup() %>%
  mutate(Type = ifelse(swiss_german == 1, "Swiss German Cantons", "Other Cantons")) %>%
  select(Type, Count, Percentage)
```

Bern, Zurich and Aargau are the top 3 cantons represented among all swiss german cantons (with in approx. 26.5%, 19.5% and 10.5% in the order)

Now, for interpretability and visualisation, let's see the proportion of swiss german people over the rest of the swiss citizens surveyed: 

```{r}
# Plot
ggplot(swiss_canton_summary, aes(x = Type, y = Percentage, fill = Type)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  theme() + 
  geom_text(aes(label=sprintf("%.2f%%", Percentage)), position=position_stack(vjust=0.5)) + 
  labs(title = "Percentage of Swiss German Cantons vs Other Cantons",
       x = "Canton Type",
       y = "Percentage") +
  ylim(0, 90)  # Extend y-axis range

```

Over all the swiss citizen, we can see that approx. 20% of them are coming from the swiss german part. 

**Plot of the total number of days spent in Vaud per month of the year**

Now let's explore the number of day spend per month of the year in the canton of Vaud

```{r, message = FALSE, warning = FALSE}
### F12 & F13 ###
#Are we more interested in knowing when they came for holidays or how long?

#duration per month 
data <- data %>%
  mutate(
    # Convert to date format first
    date_column = dmy(F12),
    # If you want the month names instead
    month_name_column = month(date_column, label = TRUE, abbr = FALSE) # Set abbr=FALSE for full month names
  )

#order
desired_order <- c("Serial2",
                    "F05_01",
                    "F05_01_ENG",
                    "F05_02",
                    "F05_02_ENG",
                    "F05_03",
                    "F05_04",
                    "F12",
                    "F13",
                    "month_name_column",
                   "hFerienDauer")
remaining_columns <- setdiff(names(data), desired_order)
new_order <- c(desired_order, remaining_columns)
data <- data[, new_order]

# nb of days per month 
nb_days_per_month <- data %>%
  select(F12, F13, month_name_column, hFerienDauer) %>%
  group_by(month_name_column) %>%
  summarize(total_hFerienDauer = sum(hFerienDauer, na.rm = TRUE))

nb_days_per_month <- nb_days_per_month %>%
  mutate(season = case_when(
    month_name_column %in% c("December", "January", "February") ~ "Winter",
    month_name_column %in% c("March", "April", "May") ~ "Spring",
    month_name_column %in% c("June", "July", "August") ~ "Summer",
    month_name_column %in% c("September", "October", "November") ~ "Fall",
    TRUE ~ NA_character_ # for any month names not matched or NA values
  ))

#plot
ggplot(nb_days_per_month, aes(x = month_name_column, y = total_hFerienDauer, fill = season)) +
  geom_bar(stat = "identity") +
  geom_smooth(aes(group = 1), method = "loess", se = FALSE, color = "red", linetype = "dashed") +
  scale_fill_manual(values = c("Winter" = "blue", "Spring" = "green", "Summer" = "purple", "Fall" = "orange")) +
  theme_minimal() +
  labs(x = "Months", y = "Sum Holiday Durations", title = "Total Holiday Duration by Month", fill = "Season") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
 
We clearly see two major moment of the year were there is a rise in the number of days spent in Vaud: March and July. 
 
```{r, message=FALSE, fig.width=8, fig.height=8, warning=FALSE}
### F16 ### 

# do a tableau with the percentage of each trip option per nationality 
trip_counts <- data %>%
  group_by(F05_01_ENG, F05_02_ENG, F16_ENG) %>%
  summarise(count = n()) %>%
  ungroup()

# Calculate total counts per nationality
nationality_totals <- trip_counts %>%
  group_by(F05_01_ENG) %>%
  summarise(total_count = sum(count))

# Join the trip counts with the total counts per nationality
trip_percentages <- trip_counts %>%
  left_join(nationality_totals, by = "F05_01_ENG") %>%
  mutate(percentage = (count / total_count) * 100) %>% 
  select(-c(count, total_count))

trip_percentages <- trip_percentages %>%
  select(-c(F05_02_ENG)) %>% 
  group_by(F05_01_ENG, F16_ENG) %>%
  summarise(Percentages = sum(percentage, na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(Percentages = round(Percentages, 1))


# datatable(trip_percentages, options = list(pageLength = 10,
#                                    class = "hover",
#                                    searchHighlight = TRUE), rownames = FALSE) 

#plot
my_colors <- c("Holidays with only one overnight stay in Switzerland" = "#FF9999",
"Round trip only within Switzerland (several overnight locations in Switzerland)" = "#9999FF",
"Round trip through Europe: only one overnight stay in Switzerland" = "#66CC99",
"Round trip through Europe: several places to stay in Switzerland" = "#E69F00")

#filter by continent for pie plots
trip_percentages_Af <- trip_percentages %>% filter(F05_01_ENG == "Africa")
trip_percentages_As <- trip_percentages %>% filter(F05_01_ENG == "Asia")
trip_percentages_AO <- trip_percentages %>% filter(F05_01_ENG == "Australia and Oceania")
trip_percentages_Eu <- trip_percentages %>% filter(F05_01_ENG == "Europe")
trip_percentages_NCA <- trip_percentages %>% filter(F05_01_ENG == "North and Central America")
trip_percentages_SA <- trip_percentages %>% filter(F05_01_ENG == "South America")

# the pie chart
trip_percentages_Af <- trip_percentages_Af %>%
  mutate(
    cs = rev(cumsum(rev(Percentages))),
    pos = Percentages/2 + lead(cs, 1),
    pos = if_else(is.na(pos), Percentages/2, pos))
trip_percentages_As <- trip_percentages_As %>%
  mutate(
    cs = rev(cumsum(rev(Percentages))),
    pos = Percentages/2 + lead(cs, 1),
    pos = if_else(is.na(pos), Percentages/2, pos))
trip_percentages_AO <- trip_percentages_AO %>%
  mutate(
    cs = rev(cumsum(rev(Percentages))),
    pos = Percentages/2 + lead(cs, 1),
    pos = if_else(is.na(pos), Percentages/2, pos))
trip_percentages_Eu <- trip_percentages_Eu %>%
  mutate(
    cs = rev(cumsum(rev(Percentages))),
    pos = Percentages/2 + lead(cs, 1),
    pos = if_else(is.na(pos), Percentages/2, pos))
trip_percentages_NCA <- trip_percentages_NCA %>%
  mutate(
    cs = rev(cumsum(rev(Percentages))),
    pos = Percentages/2 + lead(cs, 1),
    pos = if_else(is.na(pos), Percentages/2, pos))
trip_percentages_SA <- trip_percentages_SA %>%
  mutate(
    cs = rev(cumsum(rev(Percentages))),
    pos = Percentages/2 + lead(cs, 1),
    pos = if_else(is.na(pos), Percentages/2, pos))


p1 <- ggplot(trip_percentages_Af, aes(x = "", y = Percentages, fill = fct_inorder(F16_ENG))) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y", start = 0) +
  theme_void() +
  theme(legend.position = "None") +
  scale_fill_manual(values = my_colors) + # Use your defined colors here
  geom_label_repel(aes(y = pos, label = paste0(Percentages, "%")), size=6, show.legend = F, nudge_x = 1) +
  guides(fill = guide_legend(title = "F16_ENG")) +
  geom_text(aes(label = Percentages), position = position_stack(vjust = 0.5), size = 0) +
  ggtitle("Africa") +
  theme(plot.title = element_text(size = 24))

p2 <- ggplot(trip_percentages_As, aes(x = "", y = Percentages, fill = fct_inorder(F16_ENG))) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y", start = 0) +
  theme_void() +
  theme(legend.position = "None") +
  scale_fill_manual(values = my_colors) + # Use your defined colors here
  geom_label_repel(aes(y = pos, label = paste0(Percentages, "%")), size=6, show.legend = F, nudge_x = 1) +
  guides(fill = guide_legend(title = "F16_ENG")) +
  geom_text(aes(label = Percentages), position = position_stack(vjust = 0.5), size = 0) +
  ggtitle("Asia") +
  theme(plot.title = element_text(size = 24))


p3 <- ggplot(trip_percentages_AO, aes(x = "", y = Percentages, fill = fct_inorder(F16_ENG))) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y", start = 0) +
  theme_void() +
  theme(legend.position = "None") +
        #plot.title = element_text(size = 5)) +
  scale_fill_manual(values = my_colors) + # Use your defined colors here
  geom_label_repel(aes(y = pos, label = paste0(Percentages, "%")), size=6, show.legend = F, nudge_x = 1) +
  guides(fill = guide_legend(title = "F16_ENG")) +
  geom_text(aes(label = Percentages), position = position_stack(vjust = 0.5), size = 0) +
  ggtitle("Australia & Oceania") +
  theme(plot.title = element_text(size = 24))

p4 <- ggplot(trip_percentages_Eu, aes(x = "", y = Percentages, fill = fct_inorder(F16_ENG))) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y", start = 0) +
  theme_void() +
  theme(legend.position = "None") +
  scale_fill_manual(values = my_colors) + # Use your defined colors here
  geom_label_repel(aes(y = pos, label = paste0(Percentages, "%")), size=6, show.legend = F, nudge_x = 1) +
  guides(fill = guide_legend(title = "F16_ENG")) +
  geom_text(aes(label = Percentages), position = position_stack(vjust = 0.5), size = 0) +
  ggtitle("Europe ") +
  theme(plot.title = element_text(size = 24))

p5 <- ggplot(trip_percentages_NCA, aes(x = "", y = Percentages, fill = fct_inorder(F16_ENG))) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y", start = 0) +
  theme_void() +
  theme(legend.position = "None") +
  scale_fill_manual(values = my_colors) + # Use your defined colors here
  geom_label_repel(aes(y = pos, label = paste0(Percentages, "%")), size=6, show.legend = F, nudge_x = 1) +
  guides(fill = guide_legend(title = "F16_ENG")) +
  geom_text(aes(label = Percentages), position = position_stack(vjust = 0.5), size = 0) +
  ggtitle("North & Central America") +
  theme(plot.title = element_text(size = 24))

p6 <- ggplot(trip_percentages_SA, aes(x = "", y = Percentages, fill = fct_inorder(F16_ENG))) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y", start = 0) +
  theme_void() +
  #theme(legend.position = c(0.5, 0.2)) +
  theme(legend.position = "None") +
  scale_fill_manual(values = my_colors) + # Use your defined colors here
  geom_label_repel(aes(y = pos, label = paste0(Percentages, "%")), size=6, show.legend = F, nudge_x = 1) +
  guides(fill = guide_legend(title = "F16_ENG")) +
  geom_text(aes(label = Percentages), position = position_stack(vjust = 0.5), size = 0) +
  ggtitle("South America") +
  theme(plot.title = element_text(size = 24))

#merge plots
library(cowplot)
combined <- plot_grid(p1, p2, p3, p4, p5, p6,  align = c("v", "h"), cols = 2, rows = 3) # Horizontal alignment


# To align the plots without the legends showing on each, you can extract the legend
# from one plot and use it in the combined plot
legend <- get_legend(p6)
combined_plot_with_legend <- plot_grid(combined, legend, ncol = 1, nrow = 1)
# combined_plot_with_legend

```

Now let's explore the percentage of trip category per continent.
 
```{r, echo = TRUE, message=FALSE, out.height="100%", out.width="100%", fig.width= 10, fig.height=8}

ggplot(trip_percentages, aes(x = F05_01_ENG, y = Percentages, fill = F16_ENG)) +
  geom_bar(stat = "identity") +
  labs(x = "Country", y = "Percentages", fill = "Type of Trip") +
  ggtitle("Stacked Bar Plot of Type of Trip by Country") +
  scale_fill_manual(values = my_colors) + # Use your defined colors here
  geom_text(aes(label = Percentages), position = position_stack(vjust = 0.5), size = 5) +
  theme_minimal() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
        axis.text.y = element_text(hjust = 1, size = 10),
        legend.text = element_text(size = 9),
        legend.title = element_text(size = 0),
        #legend.box = "vertical",
        legend.position = "bottom",
        legend.key.size = unit(0.4, "cm")) + 
        guides(fill = guide_legend(nrow = 2, title = "Options"))

```

In general, we notice that most of the visitors coming from continent far away from Switzerland are coming in Switzerland for serveral nightstays during their trip in Europe. On another hand, living closer, are staying most of the time for one overnight stay in Switzerland. This is probably due to the large quantity of visitors surveyed coming from Switzerland but from other cantons or visitors coming from adjacent countries such as Germany in France, all these visitors accounting for a total of approx. 50% of the people surveyed. 

# Analysis

**Global frenquency of nightstays in the canton of Vaud**

```{r, message = FALSE, warning = FALSE}
### F20 ###
# Careful here: some people have 0 nightstay and only passed by switzerland for a day. 
# but answered the question 16, asking about the number of nights.
# also when f16 answered and F20 blanc ---> change NAs by 1 

data_NAs <- data %>%
  mutate(F20 = ifelse(is.na(F20), 1, F20))

F20_freq <- data_NAs %>%
  group_by(F20) %>%
  summarize(Count = n(), .groups = 'drop') %>%
  arrange(desc(Count)) # Optional: arrange in descending order of frequency

ggplot(F20_freq, aes(x = F20, y = Count, fill = F20)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(x = "Number of nights", y = "Frequency", title = "Frequency of the number of nights in Vaud") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), # Improve readability of x-axis labels
        legend.title = element_blank()) # Hide the legend if not needed
```

As most of our data contained NAs because of the structure of the survey (according to the answer of the question F16, some people could not answer question F20, therefore their answer was reported as a NA). Thus, we have decided to count the NAs as 1 overnight stay, as it is not possible to know if they only stayed in Vaud for 1 day without staying overnight. 

```{r, message = FALSE, warning = FALSE}

# frequency nightstays distribution per city 
distr_nightstays_per_district <- data_NAs %>% 
  select(F105_OrgCode, F20) %>%
  group_by(F105_OrgCode) 
  

distr_nightstays_per_district$F20[is.na(distr_nightstays_per_district$F20)] <- 0

# Adjust the plot theme for better readability
my_theme <- theme_minimal() +
  theme(
    text = element_text(size = 12),  # Adjust text size
    panel.grid.major = element_blank(),  # Remove major gridlines
    panel.grid.minor = element_blank(),  # Remove minor gridlines
    panel.border = element_blank(),  # Remove plot border
    axis.line = element_line(color = "black"),  # Add axis lines
    legend.position = "bottom")  # Move legend to bottom
    
# Plotting the density ridgeline plot
ggplot(distr_nightstays_per_district, aes(x = F20, y = F105_OrgCode, group = F105_OrgCode)) + 
  geom_density_ridges(fill = "#00AFBB", color = "white", alpha = 0.8) + 
  scale_x_continuous(labels = scales::comma) +
  labs(
    x = "Number of Nights",  # Adjust x-axis label
    y = "City",  # Adjust y-axis label
    title = "Density Plot of Night Stays per District",  # Add plot title
    subtitle = "Distribution of night stays across different Districts",  # Add plot subtitle
    caption = "Source: Your Dataset"  # Add data source caption
  )
```


```{r, message = FALSE, warning = FALSE}
### F21 ###
#consider NA as 0 here. 

# if F20 and F21 not NAs --> take percentage of nightstays in Switzerland compared to the total length of the trip

# Add a new column with the percentage of night stays in Switzerland over the total trip night stays
data2 <- data %>%
  mutate(Percentage_Night_Stays_Switzerland = ifelse(is.na(F20) | is.na(F21), NA, (F20 / F21) * 100))

ratio_nightstays_CH_EU <- data2 %>% 
    select(F20,F21, Percentage_Night_Stays_Switzerland) %>%
    group_by() %>% 
    drop_na()

# Create the distribution histogram
ggplot(ratio_nightstays_CH_EU, aes(x = Percentage_Night_Stays_Switzerland)) +
  geom_histogram(binwidth = 10, fill = "skyblue", color = "black") +
  labs(
    title = "Distribution of the percentage of nightstays in Switzerland over the whole trip",
    x = "Percentage Night Stays",
    y = "Frequency"
  ) +
  theme_minimal()
```

As this graph shows, we notice that over the whole trip, most of the people will stay around 20% of their trip in Switzerland

```{r}
### F30 ###
F30_Q <- data %>% count(F30_ENG, name = "Total")
F30_Q$percentage <- with(F30_Q, Total / sum(Total) * 100)

ggplot(F30_Q, aes(x = F30_ENG, y = Total, label = paste(percentage, "%"))) +
  geom_bar(stat = "identity", fill = "skyblue") +
  geom_text(vjust = -0.5, color = "black") +
  theme_minimal() +
  labs(title = "Q30: Have you booked a package tour?",
       x = "Answers",
       y = "Total")
```

```{r, fig.height=15}
### Deeper reasoning ###

# Where are coming from the people, per month

# Summarize data: count arrivals per month and country
monthly_arrivals <- data %>%
  group_by(month_name_column, F05_02_ENG) %>%
  summarise(Count = n(), .groups = 'drop') %>%
  arrange(month_name_column, F05_02_ENG) # This will ensure the data is ordered, which might help in visualization

#concatenate all countries except " 7 best " 

# # Define a vector of countries to exclude
# excluded_countries <- c("Switzerland", "United States of America
# ", "United Kingdom", "Spain", "France", "Germany", "Belgium")
# 
# # Filter out the excluded countries and then summarise by month
# monthly_arrivals <- monthly_arrivals %>%
#   filter(!F05_02_ENG %in% excluded_countries) %>%  # Exclude the specified countries
#   group_by(month_name_column) %>%                 # Group by month only
#   summarise(Count = sum(Count), .groups = 'drop')  # Sum the occurrences for remaining countries

#get rid of the rest of the rows


# Visualize
ggplot(monthly_arrivals, aes(x = month_name_column, y = `F05_02_ENG`, size = Count)) +
  geom_point(alpha = 0.7) + # Using alpha for better visibility if points overlap
  theme_minimal() +
  labs(title = "Monthly Arrivals in Switzerland by Country of Origin",
       x = "Month",
       y = "Country of Origin",
       size = "Number of Arrivals") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```


## Partie Lodrik

> Where did they stay? (For example: yes, they went to Montreux, but what type of accommodation, what price?

### Most popular destinations in the canton Vaud

```{r Initialization and district creation, output = FALSE, echo = FALSE}
# Importing the data and loading the necessary packages
source(here::here("scripts", "setup.R"))
data <- read.csv(here("data", "TMS_dataset_Vaud_20240314_FINAL.csv"), sep = ",")

# Assign cities to districts
# Lausanne
data$leaflet_districts[data$F105_Code == "Lausanne"] <- "Lausanne"

# Riviera-Pays-d'Enhaut
data$leaflet_districts[data$F105_Code %in% c("Montreux", "Vevey", "La Tour-de-Peilz", "Rougemont", "Château-d'Oex", "Veytaux", "Rossinière", "Corsier-sur-Vevey", "Saint-Légier-La-Chiésaz", "Blonay", "Chardonne", "Chernex")] <- "Riviera-Pays-d'Enhaut"

# Morges
data$leaflet_districts[data$F105_Code %in% c("Morges", "Yens", "Aubonne")] <- "Morges"

# Jura-Nord vaudois
data$leaflet_districts[data$F105_Code %in% c("Yverdon-les-Bains", "L'Abbaye", "Vallorbe", "Orbe", "Yvonand", "La Praz", "Le Chenit", "Bullet", "Montagny-près-Yverdon", "Saint Croix", "Le Rocheray", "Le Pont", "Le Sentier", "Le Brassus", "Les Rasses", "Les Charbonnieres")] <- "Jura-Nord vaudois"

# Aigle
data$leaflet_districts[data$F105_Code %in% c("Aigle", "Leysin", "Villeneuve (VD)", "Ormont-Dessus", "Bex", "Lavey-Morcles", "Gryon", "Ormont-Dessous", "Les Diablerets", "Villars-sur-Ollon")] <- "Aigle"

# Nyon
data$leaflet_districts[data$F105_Code %in% c("Nyon", "Prangins", "Chavannes-de-Bogis", "Coppet", "Rolle", "Commugny", "Duillier", "Gilly", "Founex")] <- "Nyon"

# Broye-Vully
data$leaflet_districts[data$F105_Code %in% c("Valbroye", "Lucens", "Avenches", "Payerne", "Cudrefin", "St. Aubin", "Estavayer-le-Lac")] <- "Broye-Vully"

# Ouest lausannois
data$leaflet_districts[data$F105_Code %in% c("Crissier", "Bussigny", "Ecublens (VD)", "Renens", "Saint-Sulpice (VD)")] <- "Ouest lausannois"

# Lavaux-Oron
data$leaflet_districts[data$F105_Code %in% c("Chexbres", "Bourg-en-Lavaux", "Cully")] <- "Lavaux-Oron"

# Gros-de-Vaud
data$leaflet_districts[data$F105_Code %in% c("Echallens")] <- "Gros-de-Vaud"
```

Let's now dive into the subject of the location of their stay. First, let's have a look at the most popular locations in the canton Vaud. Given the architecture of the study this gives us the city where most people answer the survey.

```{r Most Popular City destinations, echo = FALSE}
# Assuming 'data' is already loaded
resort_counts <- table(data$F105_Code)

# Convert to data frame and calculate proportions
resort_counts_df <- as.data.frame(resort_counts)
names(resort_counts_df) <- c("Var1", "Freq")
resort_counts_df$Proportion <- resort_counts_df$Freq / sum(resort_counts_df$Freq)

# Generate hover text for all cities
resort_counts_df$HoverText <- paste("City name: ", resort_counts_df$Var1,
                                    "<br>Number of people visiting this city: ",
                                    resort_counts_df$Freq,
                                    "/", sum(resort_counts_df$Freq),
                                    "<br>Proportion of people visiting this city: ",
                                    percent(resort_counts_df$Proportion, accuracy = 0.01))

# Define a threshold for the smallest cities to be grouped
threshold <- 0.02  # Cities below 2% of the total visits

# Calculate the sum for 'Other Cities'
other_cities_freq <- sum(resort_counts_df$Freq[resort_counts_df$Proportion < threshold])
other_cities_proportion <- sum(resort_counts_df$Proportion[resort_counts_df$Proportion < threshold])

# Create a data frame entry for 'Other Cities' with identical columns
other_cities_df <- data.frame(Var1 = "Other Cities", 
                              Freq = other_cities_freq, 
                              Proportion = other_cities_proportion)

# Generate hover text specifically for 'Other Cities'
other_cities_df$HoverText <- paste("City name: Other Cities",
                                   "<br>Number of people visiting these cities: ",
                                   other_cities_df$Freq,
                                   "/", sum(resort_counts_df$Freq),
                                   "<br>Proportion of people visiting these cities: ",
                                   percent(other_cities_proportion, accuracy = 0.01))

# Remove cities below the threshold
resort_counts_df <- resort_counts_df[resort_counts_df$Proportion >= threshold, ]

# Append 'Other Cities' row to the data frame
resort_counts_df <- rbind(resort_counts_df, other_cities_df)

# Adjust factor levels based on Proportion descending for the plot
resort_counts_df$Var1 <-
  factor(resort_counts_df$Var1,
         levels = resort_counts_df$Var1[order(-resort_counts_df$Proportion)])

# Plot as a bar plot using updated data frame
plot_ly(resort_counts_df,
        x = ~Var1,
        y = ~Proportion,
        type = 'bar',
        text = "",
        hoverinfo = 'text',
        hovertext = ~HoverText,
        textposition = 'auto') %>%
  config(modeBarButtonsToRemove = c('pan2d', 'select2d', 'lasso2d', 'zoomIn2d',
                                    'zoomOut2d', 'autoScale2d', 'resetScale2d',
                                    'hoverClosestCartesian', 
                                    'hoverCompareCartesian',
                                    'toggleSpikelines', 'zoom')) %>%
  layout(title = 'Most Popular Destinations (City)',
         xaxis = list(title = 'City',
                      showgrid = FALSE,
                      zeroline = FALSE,
                      tickangle = 45),
         yaxis = list(title = 'Proportion',
                      showgrid = TRUE,
                      zeroline = FALSE,
                      tickformat = ',.0%'),
         hovermode = 'x')
```

From this plot, we can see that the most pupular city in the canton of Vaud is Lausanne. Let's now have a look at the type of accommodation where the visitor stayed in the canton of Vaud. We took the liberty to remove the `r data %>% filter(F125_ENG == "#N/A") %>% summarise(Count = n())` observation where the type of accommodation was not specified. We can now concentrate more our attention on the district where the people stayed.

```{r Most Popular District destinations, echo = FALSE}
resort_counts <- table(data$leaflet_districts)
accommodation_counts <- table(data$F125_ENG)

# Proportion
resort_counts_df <- as.data.frame(resort_counts)
resort_counts_df$Proportion <- (resort_counts_df$Freq / sum(resort_counts_df$Freq))

# Adjust factor levels based on Proportion descending
resort_counts_df$Var1 <- factor(resort_counts_df$Var1, levels = resort_counts_df$Var1[order(-resort_counts_df$Proportion)])

# Custom hover text
resort_counts_df$HoverText <- 
  paste("District name: ", resort_counts_df$Var1,
        "<br>Number of people visiting this district: ",
        resort_counts_df$Freq, "/", sum(resort_counts_df$Freq),
        "<br>Proportion of people visiting this district: ",
        scales::percent(resort_counts_df$Proportion))

# Plot as a bar plot
plot_ly(resort_counts_df,
        x = ~Var1,
        y = ~Proportion,
        type = 'bar',
        text = "",
        hoverinfo = 'text',
        hovertext = ~HoverText,
        textposition = 'auto') %>%
  config(modeBarButtonsToRemove = c('pan2d', 'select2d', 'lasso2d', 'zoomIn2d',
                                    'zoomOut2d', 'autoScale2d', 'resetScale2d',
                                    'hoverClosestCartesian', 
                                    'hoverCompareCartesian',
                                    'toggleSpikelines', 'zoom')) %>%
  layout(title = 'Most Popular Destinations (District)',
         xaxis = list(title = 'District',
                      showgrid = FALSE,
                      zeroline = FALSE),
         yaxis = list(title = 'Proportion',
                      showgrid = TRUE,
                      zeroline = FALSE,
                      tickformat = ',.0%'),
         hovermode = 'closest')
```

As we can see, out of the `r n_distinct(data$F105_Code)` city surveyed in the `r n_distinct(data$leaflet_districts)` district, the most popular district is `r resort_counts_df$Var1[order(-resort_counts_df$Proportion)][1]`. This is not really suprising because of the way the data was collected. More people were surveyed in these city/districts than other smaller one. It is still interesting to have a look to keep this in mind.

### Type of Accommodation

```{r Type of accomodation, echo = FALSE}
data_accomodation <- subset(data, F125_ENG != "#N/A")

# Calculating the proportion of each accommodation type and ordering by those proportions
accommodation_proportion <- data_accomodation %>%
  group_by(F125_ENG) %>%
  summarise(Count = n(), .groups = 'drop') %>%
  mutate(Proportion = Count / sum(Count)) %>%
  arrange(Proportion)

# Adjust the factor levels of F125_ENG to ensure the order in the plot
accommodation_proportion$F125_ENG <- factor(accommodation_proportion$F125_ENG, levels = accommodation_proportion$F125_ENG)

# Custom hover text
accommodation_proportion$HoverText <-
  paste("Accommodation type: ", accommodation_proportion$F125_ENG,
        "<br>Number of people staying in this type of accommodation: ",
        accommodation_proportion$Count,"/", sum(accommodation_proportion$Count),
        "<br>Proportion of people staying in this type of accommodation: ",
        percent(accommodation_proportion$Proportion, accuracy = 0.01))

# Creating the bar plot with ordered proportions
plot_ly(accommodation_proportion,
                y = ~F125_ENG,
                x = ~Proportion,
                type = 'bar',
                text = "",
                hoverinfo = 'text',
                hovertext = ~HoverText,
                textposition = 'auto',
                orientation = 'h') %>%
  config(modeBarButtonsToRemove = c('pan2d', 'select2d', 'lasso2d', 'zoomIn2d',
                                    'zoomOut2d', 'autoScale2d', 'resetScale2d',
                                    'hoverClosestCartesian', 
                                    'hoverCompareCartesian',
                                    'toggleSpikelines', 'zoom')) %>%
  layout(title = "Most Popular Accommodation Types",
         xaxis = list(title = "",
                      side = 'top',
                      tickformat = ",.0%"),
         yaxis = list(title = "Type of Accommodation",
                      automargin = TRUE))
```

As we can see, the most popular type of accommodation in the canton of Vaud is Hotel/SPA House. It is interesting to note the proportion of people staying in Campsite. We can see below on the word cloud the most popular other type of accommodation.

```{r wordcloud, echo = FALSE, warning = FALSE}
# Running the wordcloud script
source(here("scripts", "word_cloud_for_eda.R"))
```

### Hotels Stars

Now, let's have a look at the hotel standing of the places where the people stayed. This will highlight the quality of the stay per district.

```{r Assign numeric value to the stars, echo = FALSE}
data <- data %>% 
  mutate(F130_num = case_when(
    F130 == "*****" ~ 5,
    F130 == "****" ~ 4,
    F130 == "***" ~ 3,
    F130 == "**" ~ 2,
    F130 == "*" ~ 1,
    TRUE ~ NA_real_))
```

#### Average Stars per District

```{r Average Stars per City, echo = FALSE, warning = FALSE}
# Calculation of the average of F130_num by F105_OrgCode, ordered by average
average_per_city <- data %>%
  group_by(leaflet_districts) %>%
  summarise(Average_F130_num = round(mean(F130_num, na.rm = TRUE), digits=2)) %>%
  arrange(desc(Average_F130_num))

# Create ordered cities list for plotly
ordered_cities <- average_per_city$leaflet_districts

# Calculate the number of observations per city (F105_OrgCode)
observations_per_district <- data %>%
  group_by(leaflet_districts) %>%
  summarise(Count = n())

# Join datasets to ensure alignment
combined_data <- left_join(average_per_city,
                           observations_per_district,
                           by = "leaflet_districts")

# Custom hover text
combined_data$HoverText <-
  paste("District name: ", combined_data$leaflet_districts,
        "<br>Average Stars: ", combined_data$Average_F130_num, "★",
        "<br>Number of people visiting this district: ", combined_data$Count,
        "/", sum(combined_data$Count))

# Creation of the plotly
plot_ly(combined_data,
        x = ~leaflet_districts,
        y = ~Average_F130_num,
        type = 'bar',
        text = "",
        hoverinfo = 'text',
        hovertext = ~HoverText,
        name = 'Average Stars') %>%
  config(modeBarButtonsToRemove = c('pan2d', 'select2d', 'lasso2d', 'zoomIn2d',
                                    'zoomOut2d', 'autoScale2d', 'resetScale2d',
                                    'hoverClosestCartesian', 
                                    'hoverCompareCartesian',
                                    'toggleSpikelines', 'zoom')) %>%
  layout(title = "Average Stars per District",
         xaxis = list(title = "District",
                      type = "category",
                      categoryorder = "array",
                      categoryarray = ordered_cities),
         yaxis = list(title = "Average Stars"),
         hovermode = "closest") 
```

As we can see on the graph above, the best average is optain in `r combined_data$leaflet_districts[1]` with an average of `r combined_data$Average_F130_num[1]` stars. But this statistics is not very representative to the reality. Only `r combined_data$Count[1]` people answered the survey in this district which is not enough to have a good idea of the quality of the hotels in this district. The second best region after `r combined_data$leaflet_districts[1]` is `r combined_data$leaflet_districts[2]` with an average of `r combined_data$Average_F130_num[2]` stars. This district got with `r combined_data$Count[2]` observation which is more representative. This high score for the Region of `r combined_data$leaflet_districts[2]` is not really surprising given the fact that this place is well know for its luxury hotels.

# Partie Jeff - Expenses and where they come from, when, where and for which sector?

::: panel-tabset
## Average Spending by category (no package tour)

```{r, message = FALSE, warning = FALSE}
spending_data <- data.frame(
  Spending_Type = c("Overnight stay", "Transports", "Food & Drink", "Souvenirs", "Other shopping", "Other expenses"),
  Amount = c(mean(data$F81_01, na.rm = TRUE), 
             mean(data$F81_02, na.rm = TRUE),
             mean(data$F81_03, na.rm = TRUE),
             mean(data$F81_04, na.rm = TRUE),
             mean(data$F81_05, na.rm = TRUE),
             mean(data$F81_06, na.rm = TRUE))
)

ggplot(spending_data, aes(x = Spending_Type, y = Amount, fill = Spending_Type)) +
  geom_bar(stat = "identity", color = "black") +
  labs(title = "Average Spending by Category (no package tour)", x = "Category", y = "Average Amount") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels for readability
```

## Average Spending by Category (with package)

```{r, message = FALSE, warning = FALSE}
spending_data_package <- data.frame(
  Spending_Type = c("Package", "Overnight stay", "Transports", "Food & Drink", "Souvenirs", "Other shopping", "Other expenses"),
  Amount = c(mean(data$F82_01, na.rm = TRUE), 
             mean(data$F82_02, na.rm = TRUE),
             mean(data$F82_03, na.rm = TRUE),
             mean(data$F82_04, na.rm = TRUE),
             mean(data$F82_05, na.rm = TRUE),
             mean(data$F82_06, na.rm = TRUE),
             mean(data$F82_07, na.rm = TRUE))
)

ggplot(spending_data_package, aes(x = Spending_Type, y = Amount, fill = Spending_Type)) +
  geom_bar(stat = "identity", color = "black") +
  labs(title = "Average Spending by Category", x = "Category", y = "Average Amount") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
:::

## Percentage of people with package & without package

```{r, message = FALSE, warning = FALSE}
# Calculate the number of non-NA entries for each type of spending
spending_counts <- data %>%
  summarize(
    Package = sum(!is.na(F82_Total)),
    WithoutPackage = sum(!is.na(F81_Total))
  ) %>%
  gather(key = "PackageType", value = "Count")

# Calculate percentages
total_records <- sum(spending_counts$Count)
spending_counts <- spending_counts %>%
  mutate(Percentage = (Count / total_records) * 100)

# Plot the percentages with the percentage shown on the bars
ggplot(spending_counts, aes(x = PackageType, y = Percentage, fill = PackageType)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = sprintf("%.1f%%", Percentage)),  # Format the labels to one decimal place
            position = position_stack(vjust = 0.5),  # Adjust text to be inside the bars
            color = "white") +
  labs(title = "Percentage of Observations With and Without Package",
       x = "Type of Spending",
       y = "Percentage (%)") +
  scale_fill_brewer(palette = "Pastel1") + # Aesthetically pleasing color palette
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

::: panel-tabset
#### Total spending per country (no package)

```{r, message = FALSE, warning = FALSE}
# Aggregate total spending for F81_Total and include continents
total_spending_F81 <- data %>%
  group_by(F05_02_ENG, F05_01_ENG) %>%
  summarize(Total_Spending_F81 = sum(F81_Total, na.rm = TRUE)) %>%
  arrange(desc(Total_Spending_F81))

# Plot for F81_Total with continent colors
ggplot(total_spending_F81, aes(x = reorder(F05_02_ENG, -Total_Spending_F81), y = Total_Spending_F81, fill = F05_01_ENG)) +
  geom_bar(stat = "identity") +
  labs(title = "Total Spending by Country for F81_Total", x = "Country", y = "Total Spending") +
  scale_fill_brewer(palette = "Set3", name = "Continent") + # Color based on continent
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        legend.position = "bottom")  # Position the legend at the bottom
```

#### Total spending per country (with package)

```{r, message = FALSE, warning = FALSE}
# Aggregate total spending for F82_Total and include continents
total_spending_F82 <- data %>%
  group_by(F05_02_ENG, F05_01_ENG) %>%
  summarize(Total_Spending_F82 = sum(F82_Total, na.rm = TRUE)) %>%
  arrange(desc(Total_Spending_F82))

# Plot for F82_Total with continent colors
ggplot(total_spending_F82, aes(x = reorder(F05_02_ENG, -Total_Spending_F82), y = Total_Spending_F82, fill = F05_01_ENG)) +
  geom_bar(stat = "identity") +
  labs(title = "Total Spending by Country for F82_Total", x = "Country", y = "Total Spending") +
  scale_fill_brewer(palette = "Set3", name = "Continent") + # Color based on continent
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        legend.position = "bottom")  # Position the legend at the bottom
```

#### Average spending (no package)

```{r, message = FALSE, warning = FALSE}
# Reshape data from wide to long format
data_long <- data %>%
  pivot_longer(
    cols = F81_01:F81_06,
    names_to = "Spending_Category",
    values_to = "Amount"
  )

# Calculate the average spending for each country and each category
average_spending <- data_long %>%
  group_by(F05_02_ENG, F05_01_ENG) %>%
  summarize(Average_Spending = mean(Amount, na.rm = TRUE)) %>%
  ungroup() %>%
  arrange(desc(Average_Spending))

# Optional: Aggregate to country level without distinguishing by category
average_spending_by_country <- average_spending %>%
  group_by(F05_02_ENG, F05_01_ENG) %>%
  summarize(Average_Spending = mean(Average_Spending, na.rm = TRUE)) %>%
  arrange(desc(Average_Spending))

# Plot the average spending by country in descending order
ggplot(average_spending_by_country, aes(x = reorder(F05_02_ENG, -Average_Spending), y = Average_Spending, fill = F05_01_ENG)) +
  geom_bar(stat = "identity") +
  labs(title = "Average Spending by Country", x = "Country", y = "Average Spending") +
  scale_fill_brewer(palette = "Set3", name = "Continent") + # Color based on continent
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        legend.position = "bottom")  # Position the legend at the bottom
```

#### Average spending (with package)

```{r, message = FALSE, warning = FALSE}
# Reshape data from wide to long format for package spending variables
data_long_package <- data %>%
  pivot_longer(
    cols = F82_01:F82_07,
    names_to = "Spending_Category",
    values_to = "Amount"
  )

# Calculate the average spending for each country and each category
average_spending_package <- data_long_package %>%
  group_by(F05_02_ENG, F05_01_ENG) %>%
  summarize(Average_Spending = mean(Amount, na.rm = TRUE)) %>%
  ungroup() %>%
  arrange(desc(Average_Spending))

# Optional: Aggregate to country level without distinguishing by category
average_spending_by_country_package <- average_spending_package %>%
  group_by(F05_02_ENG, F05_01_ENG) %>%
  summarize(Average_Spending = mean(Average_Spending, na.rm = TRUE)) %>%
  arrange(desc(Average_Spending))

# Plot the average spending by country for package tours in descending order
ggplot(average_spending_by_country_package, aes(x = reorder(F05_02_ENG, -Average_Spending), y = Average_Spending, fill = F05_01_ENG)) +
  geom_bar(stat = "identity") +
  labs(title = "Average Spending on Package Tours by Country", x = "Country", y = "Average Spending") +
  scale_fill_brewer(palette = "Set3", name = "Continent") + # Color based on continent
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        legend.position = "bottom")  # Position the legend at the bottom
```
:::

## Spending by Nationality
Checking for outliers?

```{r, message = FALSE, warning = FALSE}
filtered_data <- data %>%
  rename(Continent = F05_01_ENG) %>%
  filter(F81_Total <= 100000)

ggplot(filtered_data, aes(x = F05_02_ENG, y = F81_Total, fill = Continent)) +
  geom_boxplot() +
  labs(title = "Spending by Nationality", x = "Nationality", y = "Spending") +
  scale_fill_brewer(palette = "Set3") + # Adds a color palette for the continents
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom")
```

## Percentage of package by continent

```{r, message = FALSE, warning = FALSE}
# Prepare the data by adding a binary column for package and non-package tours
data <- data %>%
  mutate(
    With_Package = ifelse(!is.na(F82_Total), 1, 0),  # 1 if there's a package, 0 otherwise
    Without_Package = ifelse(!is.na(F81_Total), 1, 0)  # 1 if there's no package, 0 otherwise
  )

# Summarize data to count the number of package and non-package tours by continent
continent_summary <- data %>%
  group_by(F05_01_ENG) %>%
  summarize(
    Total_Tours = n(),  # Total number of tours
    Package_Tours = sum(With_Package, na.rm = TRUE),  # Total package tours
    Non_Package_Tours = sum(Without_Package, na.rm = TRUE)  # Total non-package tours
  ) %>%
  mutate(
    Package_Tour_Percentage = (Package_Tours / Total_Tours) * 100  # Calculate the percentage
  ) %>%
  arrange(desc(Package_Tour_Percentage))  # Arrange continents in descending order of package tour percentage

# Plot the percentage of package tours by continent in descending order
p <- ggplot(continent_summary, aes(x = reorder(F05_01_ENG, -Package_Tour_Percentage), y = Package_Tour_Percentage, fill = F05_01_ENG)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = sprintf("%.1f%%", Package_Tour_Percentage)),  # Adding percentage labels
            position = position_stack(vjust = 0.5), color = "black", size = 3.5) +
  labs(title = "Percentage of Package Tours by Continent",
       x = "Continent",
       y = "Percentage of Package Tours (%)") +
  scale_fill_brewer(palette = "Set3") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")  # Removing the legend for clarity

# Display the plot
print(p)
```

## Distribution of Currency

```{r, message = FALSE, warning = FALSE}
# Calculate the frequency and percentage of each currency value
currency_data <- data %>%
  count(F80) %>%
  mutate(Percentage = n / sum(n) * 100)

# Create a bar chart
ggplot(currency_data, aes(x = F80, y = Percentage, fill = F80)) +
  geom_bar(stat = "identity") +
  labs(title = "Distribution of Currency", x = "Currency", y = "Percentage (%)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Adjust text angle for better readability
```

## Partie Victor
## Responses in % to the question "Who did you travel with?"
```{r, echo=FALSE, output=FALSE, warning=FALSE, error=FALSE}
data <- read.csv("../data/TMS_dataset_Vaud_20240314_FINAL.csv", sep = ",")

explanations <- read.csv("../data/explanations.csv")

which(colnames(data) == "F31_01")
which(colnames(data) == "F32")

df <- data[, 18:33]

# Keep english columns only
seq(2, 17, 2)
df <- df[, seq(2, 17, 2)]

# Set responses to binary values
for (i in 1:ncol(df)) {
  df[, i] <- ifelse(df[, i] == "Applies", 1, ifelse(df[, i] == "Not applicable", 0, NA))
}

# We add a column to separate couples from families. Here people only traveled with their partner.

df$couples <- ifelse(df$F31_02_ENG == 1 & df$F31_03_ENG == 0 & df$F31_04_ENG == 0 & df$F31_05_ENG == 0, 1, 0)

# Sums of responses for frequency plot
df_sums <- list()

for (col in names(df)) {
  df_sums[[col]] <- sum(df[[col]])
}

# ggplot of frequency of responses
df_sums_df <- data.frame(Column = names(df_sums), Sum = unlist(df_sums))

#Change column names in df_sums_df
df_sums_df$Column <- c("Alone", "Partner", "Friends", "Children", "Other family", "Unknown people (group)", "Dog", "Other pet(s)", "Only with partner")
colnames(df_sums_df)[colnames(df_sums_df) == "Traveled with"] <- "Column"

# Sort by descending sum
df_sums_df$Column <- factor(df_sums_df$Column, levels = df_sums_df$Column[order(-df_sums_df$Sum)])

#Plot frequency of "traveled with" groups
#ggplot(df_sums_df, aes(x = Column, y = Sum)) +
#  geom_bar(stat = "identity", fill = "skyblue") +
#  labs(title = "Frequency of responses", x = "Traveled with", y = "Sum")

# make the plot in percentages

df_sums_df$Percentage <- (df_sums_df$Sum)/nrow(df)*100
```

```{r}
ggplot(df_sums_df, aes(x = Column, y = Percentage)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  geom_text(aes(label = paste0(round(Percentage, 1), "%")), vjust = -0.5, size = 3, color = "black") +
  labs(title = "Frequency of responses", x = "Traveled with", y = "Percentage") +
  ylim(0, 100)

```
We notice that more than 2/3 of overall visitors came to Vaud with their partner (68.7%). Of these, 43% came only with their partner, without friends, children or other family.
