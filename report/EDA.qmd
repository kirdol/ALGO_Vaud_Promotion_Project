# EDA

# Partie Stefan 

**Where are from the people coming in the canton of Vaud? What kind of trip are they doing?**

```{r output = FALSE}
source(here::here("scripts", "setup.R"))
data <- read.csv(here("data", "TMS_dataset_Vaud_20240314_FINAL.csv"),
                 sep = ",")
```

### Data Exploration: Who is coming? 

**Global percentage of people coming in Switzerland per continent**

```{r}
### F05_01.ENG ###
#nb of occurrences by country and continents 
OccurencesCountry <- data %>% 
  group_by(data$F05_02_ENG) %>% 
  count(sort = TRUE)

OccurencesContinent <- data %>% 
  group_by(data$F05_01_ENG) %>% 
  count(sort = TRUE)

#Continent in percentages
F05_01_PCT <- data %>% 
  group_by(F05_01_ENG) %>%
  summarise(Count = n()) %>%
  mutate(Percentage = Count / sum(Count) * 100) %>% 
  arrange(desc(Percentage))

datatable(F05_01_PCT, options = list(pageLength = 10,
                                   class = "hover",
                                   searchHighlight = TRUE), rownames = FALSE) 
```

```{r}
#plot numbers continent 
ggplot(F05_01_PCT, aes(x=reorder(F05_01_ENG, Percentage), y=Percentage, fill=F05_01_ENG)) +
  geom_bar(stat="identity") +
  coord_flip() +  # Flip coordinates for horizontal bars
  theme_minimal() +
  labs(x="Continents", y="Percentage", title="Percentage of Each Unique Continent") +
  theme(legend.title = element_blank(), # Remove the legend title
        legend.position = "none", # Hide the legend as the colors are not necessary with labels
        plot.title = element_text(hjust = 0.5), # Center the plot title
        axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotate x-axis labels for readability
  geom_text(aes(label=sprintf("%.2f%%", Percentage)), position=position_dodge(width=0.9), vjust=-0.25) # Add percentage labels

```

```{r}
# Assuming 'F05_01_PCT' contains continent data and 'F05_02_PCT' contains country data
# Let's merge the country percentages into the continent data frame.
# Ensure that both data frames have a common identifier for continents. Adjust 'by' as needed.

# Creating a country percentage by continent
F05_02_PCT <- data %>%
  group_by(F05_01_ENG, F05_02_ENG) %>%  # Group by both continent and country
  summarise(Count = n(), .groups = "drop") %>%
  mutate(Percentage = Count / sum(Count) * 100) %>%
  arrange(desc(Percentage))

# Merge country data back to continent data
combined_data <- merge(F05_01_PCT, F05_02_PCT, by="F05_01_ENG", all.x = TRUE)

# Now create the horizontal stacked bar plot
ggplot(combined_data, aes(x=reorder(F05_01_ENG, -Percentage.y), y=Percentage.y, fill=F05_02_ENG)) +
  geom_bar(stat="identity") +
  coord_flip() +  # Flip coordinates for horizontal bars
  theme_minimal() +
  labs(x="Continents", y="Percentage", title="Percentage of Each Country by Continent") +
  theme(legend.position = "none",
    legend.title = element_text(size=0),
        legend.text = element_text(size = 0),# Add legend title if needed
        plot.title = element_text(hjust = 0.5), # Center the plot title
        axis.text.y = element_text(angle = 0, hjust = 1)) + # Adjust text angle and justification
  geom_text(aes(label=sprintf("%.2f%%", Percentage.y)), position=position_stack(vjust=0.5))  # Add percentage labels inside the bars
```

```{r}
# # trying the shiny for this plot


#Add a column continent to F05_02_ENG

# # UI
# ui <- fluidPage(
#   titlePanel("Interactive Continent/Country Percentage Plot"),
#   sidebarLayout(
#     sidebarPanel(
#       helpText("Displays the percentage of each country by continent.")
#     ),
#     mainPanel(
#       plotOutput("stackedPlot")
#     )
#   )
# )
# 
# # Server
# server <- function(input, output) {
# 
#   output$stackedPlot <- renderPlot({
#     # Merge the datasets on the continent identifier, F05_01_ENG
#     combined_data <- merge(F05_01_PCT, F05_02_PCT, by="F05_01_ENG")
# 
#     ggplot(combined_data, aes(x=reorder(F05_01_ENG, -Country_Percentage), y=Country_Percentage, fill=F05_02_ENG)) +
#       geom_bar(stat="identity") +
#       coord_flip() +  # Flip coordinates for horizontal bars
#       theme_minimal() +
#       labs(x="Continents", y="Percentage", title="Percentage of Each Country by Continent") +
#       theme(legend.position = "none", # Hide the legend
#             plot.title = element_text(hjust = 0.5), # Center the plot title
#             axis.text.y = element_text(angle = 0, hjust = 1)) + # Adjust text angle and justification
#       geom_text(aes(label=sprintf("%.2f%%", Country_Percentage)), position=position_stack(vjust=0.5))  # Add percentage labels inside the bars
#   })
# }
# 
# # Run the application 
# shinyApp(ui = ui, server = server)
```

**Global percentage of people coming in Switzerland per country of origin**

```{r}

# Countries in percentages 
F05_02_PCT <- data %>% 
  group_by(F05_02_ENG) %>%
  summarise(Count = n()) %>%
  mutate(Percentage = Count / sum(Count) * 100) %>% 
  arrange(desc(Percentage))

datatable(F05_02_PCT, options = list(pageLength = 10,
                                   class = "hover",
                                   searchHighlight = TRUE), rownames = FALSE)

#add continent next to each country
#or merge continent and country table. 1st column continents, 2nd countries, # of occurences then percentage
```

**Ratio of each country of origin over the total number of visitors surveyed per city**

```{r}
# #total number of tourist per city
# numbertouristpercity <- data %>%
#   group_by(F105_Code) %>%
#   count(sort = TRUE)
#   
# #ratio of nationality per city
# <- data %>% 
#   group_by(F105_Code) %>%
#   summarise(Count = n()) %>%
#   mutate(Percentage = Count / sum(Count) * 100) %>% 
#   arrange(desc(Percentage))

# Counting the number of tourists by city and nationality
tourists_by_nationality <- data %>%
  group_by(F105_Code, F05_02_ENG) %>%
  summarise(Count = n(), .groups = 'drop')

# Calculating the total number of tourists per city
total_tourists_per_city <- tourists_by_nationality %>%
  group_by(F105_Code) %>%
  summarise(TotalCount = sum(Count), .groups = 'drop')

# Joining the counts back to the detailed breakdown and calculating the ratio
nationality_ratio_per_city <- tourists_by_nationality %>%
  left_join(total_tourists_per_city, by = "F105_Code") %>%
  mutate(Ratio = Count / TotalCount) %>%
  select(F105_Code, F05_02_ENG, Ratio)

datatable(nationality_ratio_per_city, options = list(pageLength = 10,
                                   class = "hover",
                                   searchHighlight = TRUE), rownames = FALSE)

# stacked bar plot with cities on y and % on x and fill = % nationalities per city relatively to the number of tourist who visited the city 
# faire un graph par continent ? (beaucoup de villes )
```

**Ratio of each country of origin relatively to the number of tourist surveyed in each district**

```{r}
#ratio of each nationality relatively to the number of tourist surveyed in each district F105_OrgCode
tourists_by_nationality <- data %>%
  group_by(F105_OrgCode, F05_02_ENG) %>%
  summarise(Count = n(), .groups = 'drop')

# Calculating the total number of tourists per city
total_tourists_per_city <- tourists_by_nationality %>%
  group_by(F105_OrgCode) %>%
  summarise(TotalCount = sum(Count), .groups = 'drop')

# Joining the counts back to the detailed breakdown and calculating the ratio
nationality_ratio_per_city <- tourists_by_nationality %>%
  left_join(total_tourists_per_city, by = "F105_OrgCode") %>%
  mutate(Ratio = Count / TotalCount) %>%
  select(F105_OrgCode, F05_02_ENG, Ratio)

datatable(nationality_ratio_per_city, options = list(pageLength = 10,
                                   class = "hover",
                                   searchHighlight = TRUE), rownames = FALSE)

```


```{r}

## Séparation cantons suisse-allemands 

# # Swiss german column
# 
# unique(data[data$F05_02 == "Schweiz", ]$F05_03)
# 
# swiss_german_cantons = c("Luzern", "Schwyz", "Bern", "Neuenburg", "Aargau",
#                          "Zürich", "Basel-Stadt", "Basel-Landschaft", "Obwalden",
#                          "Appenzell Innerrhoden", "Schaffhausen", "Thurgau",
#                          "St. Gallen", "Solothurn", "Uri", "Zug", "Nidwalden",
#                          "Appenzell Ausserrhoden")
# 
# 
# # Binary column for swiss germans
# data$swiss_german <- ifelse(data$F05_02 == "Schweiz" & data$F05_03 %in% swiss_german_cantons, 1, 0)
```



```{r}

# stacked bar plot with cities on y and % on x and fill = % nationalities per city relatively to the number of tourist who visited the city 

# Create the bar chart
# Create the bar chart
# ggplot(nationality_ratio_per_city, aes(x = Ratio, y = F105_Code)) +
#   geom_bar(stat = "identity") +
#   labs(x = "Percentage", y = "City", title = "Percentage of Tourists by City") +
#   theme_minimal()


```

```{r}

## trying to add percentage country of origin visitors relatively to each district on leaflet


# # Assume 'F105_Code' is your city code and maps directly to 'leaflet_districts'
# # Add district info to nationality ratios
# nationality_with_districts <- nationality_ratio_per_city %>%
#   left_join(data %>% select(F105_Code, leaflet_districts), by = "F105_Code")
# 
# # Aggregate nationality data by district
# district_nationality_ratios <- nationality_with_districts %>%
#   group_by(leaflet_districts, F05_02_ENG) %>%
#   summarise(AverageRatio = mean(Ratio), .groups = 'drop') %>%
#   mutate(Label = paste(F05_02_ENG, ":", round(AverageRatio * 100, 2), "%")) %>%
#   group_by(leaflet_districts) %>%
#   summarise(AllLabels = paste(Label, collapse = "\n"))
# 
# # Join with geographic data
# vaud <- vaud %>%
#   left_join(district_nationality_ratios, by = c("NAME" = "leaflet_districts"))
# 
# # Assuming AverageRatio is correctly calculated and added
# palette <- colorNumeric(palette = "Blues", domain = range(vaud$AverageRatio, na.rm = TRUE))
# 
# # Create a Leaflet map
# leaflet(vaud) %>%
#   addTiles() %>%
#   setView(lng = 6.63, lat = 46.51, zoom = 9) %>%
#   addPolygons(
#     fillOpacity = 0.75, color = ~palette(AverageRatio),
#     weight = 1,
#     popup = ~AllLabels
#   )
# 
# 
# 
# 
# # If AverageRatio is not listed, ensure it is being calculated correctly
# district_nationality_ratios <- nationality_with_districts %>%
#   group_by(leaflet_districts, F05_02_ENG) %>%
#   summarise(AverageRatio = mean(Ratio, na.rm = TRUE), .groups = 'drop') %>%
#   mutate(Label = paste(F05_02_ENG, ":", round(AverageRatio * 100, 2), "%")) %>%
#   group_by(leaflet_districts) %>%
#   summarise(AllLabels = paste(Label, collapse = "\n"))
# 
# # Make sure that the column names used in the join are correct
# colnames(vaud)
# colnames(district_nationality_ratios)
# 
# # Correct the join statement
# vaud <- vaud %>%
#   left_join(district_nationality_ratios, by = c("NAME" = "leaflet_districts"))
# 
# # Check for AverageRatio in vaud
# if("AverageRatio" %in% colnames(vaud)) {
#   print("AverageRatio is present")
# } else {
#   print("AverageRatio is missing")
# }
# 
# # Adjust palette creation
# if("AverageRatio" %in% colnames(vaud)) {
#   palette <- colorNumeric(palette = "Blues", domain = range(vaud$AverageRatio, na.rm = TRUE))
# } else {
#   palette <- colorNumeric(palette = "Blues", domain = c(0, 1))  # Default or fallback range
# }
# 
# # Create the Leaflet map
# leaflet(vaud) %>%
#   addTiles() %>%
#   setView(lng = 6.63, lat = 46.51, zoom = 9) %>%
#   addPolygons(
#     fillOpacity = 0.75, color = ~palette(AverageRatio),
#     weight = 1,
#     popup = ~AllLabels
#   )
# 
# 
# 
# # Example to combine columns if necessary (adjust as needed based on content)
# vaud$AllLabels <- apply(vaud[, grep("AllLabels", colnames(vaud))], 1, function(x) paste(na.omit(x), collapse = " "))
# 
# # Drop the old AllLabels.x.x columns
# vaud <- vaud %>%
#   select(-matches("AllLabels.[0-9]+"))
# 
# # Check the new AllLabels column
# head(vaud$AllLabels)
# 
# # Set up a simple color palette if no AverageRatio is available
# palette <- colorNumeric(palette = "Blues", domain = c(0, 1))
# 
# # Create the Leaflet map using vaud2
# leaflet(vaud) %>%
#   addTiles() %>%
#   setView(lng = 6.63, lat = 46.51, zoom = 9) %>%
#   addPolygons(
#     fillOpacity = 0.75, color = ~palette(1),  # Uniform color as no AverageRatio is available
#     weight = 1,
#     popup = ~AllLabels
#   )
# 



```


```{r, fig.width=10, fig.height=20}
### F05_02_ENG ###
#plot with continents 
F05_02_PCT <- data %>%
  group_by(F05_02_ENG, F05_01_ENG) %>%  # Group by both country and continent
  summarise(Count = n(), .groups = 'drop') %>%
  mutate(Percentage = Count / sum(Count) * 100) %>%
  arrange(desc(Percentage))

ggplot(F05_02_PCT, aes(x = reorder(`F05_02_ENG`, Percentage), y = Percentage, fill = `F05_01_ENG`)) + 
  geom_bar(stat = "identity") +
  coord_flip() +  # Make the plot horizontal
  scale_fill_brewer(palette = "Set3", name = "Continent") +  # Use a color palette for continents
  theme_minimal() +
  labs(x = "Country", y = "Percentage", title = "Percentage of Responses by Country and Continent") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9), 
        axis.text.y = element_text(angle = 45, hjust = 1, size = 9),
        plot.title = element_text(hjust = 0.5),
        legend.position = "right") +  # Adjust legend position
  geom_text(aes(label=sprintf("%.2f%%", Percentage)), position=position_stack(vjust=0.5))
```

```{r, message = FALSE, warning = FALSE}
### F12 & F13 ###
#Are we more interested in knowing when they came for holidays or how long?

#duration per month 
data <- data %>%
  mutate(
    # Convert to date format first
    date_column = dmy(F12),
    # If you want the month names instead
    month_name_column = month(date_column, label = TRUE, abbr = FALSE) # Set abbr=FALSE for full month names
  )

#order
desired_order <- c("Serial2",
                    "F05_01",
                    "F05_01_ENG",
                    "F05_02",
                    "F05_02_ENG",
                    "F05_03",
                    "F05_04",
                    "F12",
                    "F13",
                    "month_name_column",
                   "hFerienDauer")
remaining_columns <- setdiff(names(data), desired_order)
new_order <- c(desired_order, remaining_columns)
data <- data[, new_order]

# nb of days per month 
nb_days_per_month <- data %>%
  select(F12, F13, month_name_column, hFerienDauer) %>%
  group_by(month_name_column) %>%
  summarize(total_hFerienDauer = sum(hFerienDauer, na.rm = TRUE))

nb_days_per_month <- nb_days_per_month %>%
  mutate(season = case_when(
    month_name_column %in% c("December", "January", "February") ~ "Winter",
    month_name_column %in% c("March", "April", "May") ~ "Spring",
    month_name_column %in% c("June", "July", "August") ~ "Summer",
    month_name_column %in% c("September", "October", "November") ~ "Fall",
    TRUE ~ NA_character_ # for any month names not matched or NA values
  ))

#plot
ggplot(nb_days_per_month, aes(x = month_name_column, y = total_hFerienDauer, fill = season)) +
  geom_bar(stat = "identity") +
  geom_smooth(aes(group = 1), method = "loess", se = FALSE, color = "red", linetype = "dashed") +
  scale_fill_manual(values = c("Winter" = "blue", "Spring" = "green", "Summer" = "purple", "Fall" = "orange")) +
  theme_minimal() +
  labs(x = "Months", y = "Sum Holiday Durations", title = "Total Holiday Duration by Month", fill = "Season") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r, message=FALSE}
### F16 ### 

# do a tableau with the percentage of each trip option per nationality 
trip_counts <- data %>%
  group_by(F05_02_ENG, F16_ENG) %>%
  summarise(count = n()) %>%
  ungroup()

# Calculate total counts per nationality
nationality_totals <- trip_counts %>%
  group_by(F05_02_ENG) %>%
  summarise(total_count = sum(count))

# Join the trip counts with the total counts per nationality
trip_percentages <- trip_counts %>%
  left_join(nationality_totals, by = "F05_02_ENG") %>%
  mutate(percentage = (count / total_count) * 100) %>% 
  select(-c(count, total_count))

datatable(trip_percentages, options = list(pageLength = 10,
                                   class = "hover",
                                   searchHighlight = TRUE), rownames = FALSE) 

#plot

my_colors <- c("Holidays with only one overnight stay in Switzerland" = "#FF9999",
"Round trip only within Switzerland (several overnight locations in Switzerland)" = "#9999FF",
"Round trip through Europe: only one overnight stay in Switzerland" = "#66CC99",
"Round trip through Europe: several places to stay in Switzerland" = "#E69F00")

F16_Q <- data %>%
  count(F16_ENG, name = "total_options") %>%
  mutate(percentage = total_options / sum(total_options) * 100,
         label = sprintf("%.1f%%", percentage)) 

# Use ggplot2 to create the pie chart
ggplot(F16_Q, aes(x = "", y = percentage, fill = F16_ENG)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) + 
  theme_void() +
  scale_fill_manual(values = my_colors) + # Use your defined colors here
  geom_text(aes(label = percentage), position = position_stack(vjust = 0.5)) +
  ggtitle("Global Percentage Distribution of Type of Trips") 

```

```{r, fig.width=15, fig.height=10}

ggplot(trip_percentages, aes(x = F05_02_ENG, y = percentage, fill = F16_ENG)) +
  geom_bar(stat = "identity") +
  labs(x = "Country", y = "Percentage", fill = "Type of Trip") +
  ggtitle("Stacked Bar Plot of Type of Trip by Country") +
  scale_fill_manual(values = my_colors) + # Use your defined colors here
  theme_minimal() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
        axis.text.y = element_text(hjust = 1, size = 8),
        legend.position = "top",
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 0),
        legend.box = "vertical")

```

> Where did they stay? (For example: yes, they went to Montreux, but what type of accommodation, what price?

```{r Initialization and district creation, output = FALSE, echo = FALSE}
# Importing the data and loading the necessary packages
source(here::here("scripts", "setup.R"))
data <- read.csv(here("data", "TMS_dataset_Vaud_20240314_FINAL.csv"), sep = ",")

# Assign cities to districts
# Lausanne
data$leaflet_districts[data$F105_Code == "Lausanne"] <- "Lausanne"

# Riviera-Pays-d'Enhaut
data$leaflet_districts[data$F105_Code %in% c("Montreux", "Vevey", "La Tour-de-Peilz", "Rougemont", "Château-d'Oex", "Veytaux", "Rossinière", "Corsier-sur-Vevey", "Saint-Légier-La-Chiésaz", "Blonay", "Chardonne", "Chernex")] <- "Riviera-Pays-d'Enhaut"

# Morges
data$leaflet_districts[data$F105_Code %in% c("Morges", "Yens", "Aubonne")] <- "Morges"

# Jura-Nord vaudois
data$leaflet_districts[data$F105_Code %in% c("Yverdon-les-Bains", "L'Abbaye", "Vallorbe", "Orbe", "Yvonand", "La Praz", "Le Chenit", "Bullet", "Montagny-près-Yverdon", "Saint Croix", "Le Rocheray", "Le Pont", "Le Sentier", "Le Brassus", "Les Rasses", "Les Charbonnieres")] <- "Jura-Nord vaudois"

# Aigle
data$leaflet_districts[data$F105_Code %in% c("Aigle", "Leysin", "Villeneuve (VD)", "Ormont-Dessus", "Bex", "Lavey-Morcles", "Gryon", "Ormont-Dessous", "Les Diablerets", "Villars-sur-Ollon")] <- "Aigle"

# Nyon
data$leaflet_districts[data$F105_Code %in% c("Nyon", "Prangins", "Chavannes-de-Bogis", "Coppet", "Rolle", "Commugny", "Duillier", "Gilly", "Founex")] <- "Nyon"

# Broye-Vully
data$leaflet_districts[data$F105_Code %in% c("Valbroye", "Lucens", "Avenches", "Payerne", "Cudrefin", "St. Aubin", "Estavayer-le-Lac")] <- "Broye-Vully"

# Ouest lausannois
data$leaflet_districts[data$F105_Code %in% c("Crissier", "Bussigny", "Ecublens (VD)", "Renens", "Saint-Sulpice (VD)")] <- "Ouest lausannois"

# Lavaux-Oron
data$leaflet_districts[data$F105_Code %in% c("Chexbres", "Bourg-en-Lavaux", "Cully")] <- "Lavaux-Oron"

# Gros-de-Vaud
data$leaflet_districts[data$F105_Code %in% c("Echallens")] <- "Gros-de-Vaud"
```

Let's now dive into the subject of the location of their stay. First, let's have a look at the most popular locations in the canton Vaud. Given the architecture of the study this gives us the city where most people answer the survey.

```{r Most Popular City destinations, echo = FALSE}
resort_counts <- table(data$F105_Code)
accommodation_counts <- table(data$F125_ENG)

# Proportion
resort_counts_df <- as.data.frame(resort_counts)
resort_counts_df$Proportion <- (resort_counts_df$Freq / sum(resort_counts_df$Freq))

# Adjust factor levels based on Proportion descending
resort_counts_df$Var1 <- factor(resort_counts_df$Var1,
                                levels = resort_counts_df$Var1[order(-resort_counts_df$Proportion)])

# Custom hover text
resort_counts_df$HoverText <-
  paste("City name: ", resort_counts_df$Var1,
        "<br>Number of people visiting this city:", resort_counts_df$Freq,
        "/", sum(resort_counts_df$Freq),
        "<br>Proportion of people visiting this city:",
        scales::percent(resort_counts_df$Proportion))

# Plot as a bar plot
plot_ly(resort_counts_df,
        x = ~Var1,
        y = ~Proportion,
        type = 'bar',
        text = "",
        hoverinfo = 'text',
        hovertext = ~HoverText,
        textposition = 'auto') %>%
  config(modeBarButtonsToRemove = c('pan2d', 'select2d', 'lasso2d', 'zoomIn2d',
                                    'zoomOut2d', 'autoScale2d', 'resetScale2d',
                                    'hoverClosestCartesian', 
                                    'hoverCompareCartesian',
                                    'toggleSpikelines', 'zoom')) %>%
  layout(title = 'Most Popular Destinations (City)',
         xaxis = list(title = 'City',
                      showgrid = FALSE,
                      zeroline = FALSE,
                      tickangle = 45),
         yaxis = list(title = 'Proportion',
                      showgrid = TRUE,
                      zeroline = FALSE),
         hovermode = 'x')
```

```{r Most Popular District destinations, echo = FALSE}
resort_counts <- table(data$leaflet_districts)
accommodation_counts <- table(data$F125_ENG)

# Proportion
resort_counts_df <- as.data.frame(resort_counts)
resort_counts_df$Proportion <- (resort_counts_df$Freq / sum(resort_counts_df$Freq))

# Adjust factor levels based on Proportion descending
resort_counts_df$Var1 <- factor(resort_counts_df$Var1, levels = resort_counts_df$Var1[order(-resort_counts_df$Proportion)])

# Custom hover text
resort_counts_df$HoverText <-
  paste("District name: ", resort_counts_df$Var1,
        "<br>Number of people visiting this district:", resort_counts_df$Freq,
        "/", sum(resort_counts_df$Freq),
        "<br>Proportion of people visiting this district:",
        scales::percent(resort_counts_df$Proportion))

# Plot as a bar plot
plot_ly(resort_counts_df,
        x = ~Var1,
        y = ~Proportion,
        type = 'bar',
        text = "",
        hoverinfo = 'text',
        hovertext = ~HoverText,
        textposition = 'auto') %>%
  config(modeBarButtonsToRemove = c('pan2d', 'select2d', 'lasso2d', 'zoomIn2d',
                                    'zoomOut2d', 'autoScale2d', 'resetScale2d',
                                    'hoverClosestCartesian', 
                                    'hoverCompareCartesian',
                                    'toggleSpikelines', 'zoom')) %>%
  layout(title = 'Most Popular Destinations (District)',
         xaxis = list(title = 'District',
                      showgrid = FALSE,
                      zeroline = FALSE),
         yaxis = list(title = 'Proportion',
                      showgrid = TRUE,
                      zeroline = FALSE),
         hovermode = 'closest')
```

As we can see, out of the `r n_distinct(data$F105_Code)` city surveyed in the `r n_distinct(data$leaflet_districts)` district, the most popular district is `r resort_counts_df$Var1[order(-resort_counts_df$Proportion)][1]`. This is not really suprising because of the way the data was collected. More people were surveyed in these city/districts than other smaller one. It is still interesting to have a look to keep this in mind.

## Hotels Stars

Now, let's have a look at the hotel standing of the places where the people stayed. This will highlight the quality of the stay per district.

```{r Assign numeric value to the stars, echo = FALSE}
data <- data %>% 
  mutate(F130_num = case_when(
    F130 == "*****" ~ 5,
    F130 == "****" ~ 4,
    F130 == "***" ~ 3,
    F130 == "**" ~ 2,
    F130 == "*" ~ 1,
    TRUE ~ NA_real_
  ))
```

### Average Stars per District

```{r Average Stars per City, echo = FALSE, warning = FALSE}
# Calculation of the average of F130_num by F105_OrgCode, ordered by average
average_per_city <- data %>%
  group_by(leaflet_districts) %>%
  summarise(Average_F130_num = round(mean(F130_num, na.rm = TRUE), digits=2)) %>%
  arrange(desc(Average_F130_num))

# Create ordered cities list for plotly
ordered_cities <- average_per_city$leaflet_districts

# Calculate the number of observations per city (F105_OrgCode)
observations_per_district <- data %>%
  group_by(leaflet_districts) %>%
  summarise(Count = n())

# Join datasets to ensure alignment
combined_data <- left_join(average_per_city,
                           observations_per_district,
                           by = "leaflet_districts")

# Custom hover text
combined_data$HoverText <-
  paste("District name: ", combined_data$leaflet_districts,
        "<br>Average Stars:", combined_data$Average_F130_num,
        "<br>Number of people visiting this district:", combined_data$Count,
        "/", sum(combined_data$Count))

# Creation of the plotly
plot_ly(combined_data,
        x = ~leaflet_districts,
        y = ~Average_F130_num,
        type = 'bar',
        text = "",
        hoverinfo = 'text',
        hovertext = ~HoverText,
        name = 'Average Stars') %>%
  config(modeBarButtonsToRemove = c('pan2d', 'select2d', 'lasso2d', 'zoomIn2d',
                                    'zoomOut2d', 'autoScale2d', 'resetScale2d',
                                    'hoverClosestCartesian', 
                                    'hoverCompareCartesian',
                                    'toggleSpikelines', 'zoom')) %>%
  layout(title = "Average Stars per District",
         xaxis = list(title = "City",
                      type = "category",
                      categoryorder = "array",
                      categoryarray = ordered_cities),
         yaxis = list(title = "Average Stars"),
         hovermode = "closest") 
```

As we can see on the graph above, the best average is optain in `r combined_data$leaflet_districts[1]` with an average of `r combined_data$Average_F130_num[1]` stars. But this statistics is not very representative to the reality. Only `r combined_data$Count[1]` people answered the survey in this district which is not enough to have a good idea of the quality of the hotels in this district. The second best region after `r combined_data$leaflet_districts[1]` is `r combined_data$leaflet_districts[2]` with an average of `r combined_data$Average_F130_num[2]` stars. This district got with `r combined_data$Count[2]` observation which is more representative. This high score for the Region of `r combined_data$leaflet_districts[2]` is not really surprising given the fact that this place is well know for its luxury hotels.

### Distribution of Stars by District

```{r Distribution of Stars by City, echo = FALSE, warning = FALSE}
# Filtering to exclude cities with no valid data in F130_num
data_filtered <- data %>%
  filter(!is.na(F130_num)) %>%
  group_by(leaflet_districts) %>%
  # Calculate the average to ensure we only include cities with data
  summarise(Average_F130_num = mean(F130_num, na.rm = TRUE)) %>%
  filter(!is.na(Average_F130_num)) %>%
  arrange(desc(Average_F130_num))

# Reorder the F105_Code factor in the filtered dataframe according to the calculated averages
data$F105_Code <- factor(data$leaflet_districts, levels = data_filtered$leaflet_districts)

# Ensure that the original dataframe is filtered to match the selected cities
data <- data %>%
  filter(leaflet_districts %in% data_filtered$leaflet_districts)

# Create the chart with geom_density_ridges_gradient for cities with valid data in F130_num
ggplot(data, aes(x = F130_num, y = leaflet_districts, fill = ..x..)) +
  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
  scale_fill_viridis_c(option = "C") +
  labs(title = "Distribution of F130_num by City with Gradient",
       x = "F130_num",
       y = "District") +
  theme_ridges() + theme(legend.position = "none")
```

# Partie Jeff

## Average Spending by category (no package tour)

```{r}
spending_data <- data.frame(
  Spending_Type = c("Overnight stay", "Transports", "Food & Drink", "Souvenirs", "Other shopping", "Other expenses"),
  Amount = c(mean(data$F81_01, na.rm = TRUE), 
             mean(data$F81_02, na.rm = TRUE),
             mean(data$F81_03, na.rm = TRUE),
             mean(data$F81_04, na.rm = TRUE),
             mean(data$F81_05, na.rm = TRUE),
             mean(data$F81_06, na.rm = TRUE))
)

ggplot(spending_data, aes(x = Spending_Type, y = Amount, fill = Spending_Type)) +
  geom_bar(stat = "identity", color = "black") +
  labs(title = "Average Spending by Category (no package tour)", x = "Category", y = "Average Amount") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels for readability
```

## Average Spending by Category (with package)

```{r}
spending_data_package <- data.frame(
  Spending_Type = c("Package", "Overnight stay", "Transports", "Food & Drink", "Souvenirs", "Other shopping", "Other expenses"),
  Amount = c(mean(data$F82_01, na.rm = TRUE), 
             mean(data$F82_02, na.rm = TRUE),
             mean(data$F82_03, na.rm = TRUE),
             mean(data$F82_04, na.rm = TRUE),
             mean(data$F82_05, na.rm = TRUE),
             mean(data$F82_06, na.rm = TRUE),
             mean(data$F82_07, na.rm = TRUE))
)

ggplot(spending_data_package, aes(x = Spending_Type, y = Amount, fill = Spending_Type)) +
  geom_bar(stat = "identity", color = "black") +
  labs(title = "Average Spending by Category", x = "Category", y = "Average Amount") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

### Comparison of Spending with & without package

```{r}
# Data for spending without package
spending_data <- data.frame(
  Spending_Type = c("Overnight stay", "Transports", "Food & Drink", "Souvenirs", "Other shopping", "Other expenses"),
  Amount = c(mean(data$F81_01, na.rm = TRUE), 
             mean(data$F81_02, na.rm = TRUE),
             mean(data$F81_03, na.rm = TRUE),
             mean(data$F81_04, na.rm = TRUE),
             mean(data$F81_05, na.rm = TRUE),
             mean(data$F81_06, na.rm = TRUE))
)

# Data for spending with package
spending_data_package <- data.frame(
  Spending_Type = c("Package", "Overnight stay", "Transports", "Food & Drink", "Souvenirs", "Other shopping", "Other expenses"),
  Amount = c(mean(data$F82_01, na.rm = TRUE), 
             mean(data$F82_02, na.rm = TRUE),
             mean(data$F82_03, na.rm = TRUE),
             mean(data$F82_04, na.rm = TRUE),
             mean(data$F82_05, na.rm = TRUE),
             mean(data$F82_06, na.rm = TRUE),
             mean(data$F82_07, na.rm = TRUE))
)

# Create plotly objects for each spending type
p1 <- plot_ly(spending_data, x = ~Spending_Type, y = ~Amount, type = 'bar', name = 'No Package',
              marker = list(color = 'rgba(50, 171, 96, 0.6)', line = list(color = 'rgba(50, 171, 96, 1.0)', width = 1))) %>%
  layout(title = "Average Spending by Category (No Package Tour)",
         xaxis = list(title = "Category", tickangle = 45),
         yaxis = list(title = "Average Amount"),
         barmode = 'group')

p2 <- plot_ly(spending_data_package, x = ~Spending_Type, y = ~Amount, type = 'bar', name = 'With Package',
              marker = list(color = 'rgba(128, 0, 128, 0.6)', line = list(color = 'rgba(128, 0, 128, 1.0)', width = 1))) %>%
  layout(title = "Average Spending by Category (With Package)",
         xaxis = list(title = "Category", tickangle = 45),
         yaxis = list(title = "Average Amount"),
         barmode = 'group')

# Combine plots into a single plot with a dropdown menu
subplot(p1, p2, nrows = 1) %>%
  layout(
    title = "Comparison of Spending With and Without Package",
    updatemenus = list(
      list(
        y = 0.7,
        buttons = list(
          list(method = "relayout", args = list("visible", c(TRUE, FALSE)), label = "No Package"),
          list(method = "relayout", args = list("visible", c(FALSE, TRUE)), label = "With Package")
        )
      )
    )
  )
```

## Distribution of Currency

```{r}
# Calculate the frequency and percentage of each currency value
currency_data <- data %>%
  count(F80) %>%
  mutate(Percentage = n / sum(n) * 100)

# Create a bar chart
ggplot(currency_data, aes(x = F80, y = Percentage, fill = F80)) +
  geom_bar(stat = "identity") +
  labs(title = "Distribution of Currency", x = "Currency", y = "Percentage (%)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Adjust text angle for better readability
```
