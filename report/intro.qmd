```{r, echo = FALSE, output = FALSE}
# Load the packages and load the data
source(here::here("scripts", "setup.R"))
data <- read.csv(here("data","TMS_dataset_Vaud_20240314_FINAL.csv"),
                 sep = ",")
```

# Introduction

The object of this report is the tourism survey conducted by Tourismus Monitor Schweiz, focusing on tourists visiting the canton of Vaud, Switzerland, from November 2022 to March 2024. The survey aims to identify key information about tourists visiting Vaud, including information about their stay in Switzerland (length of stay, amount spent, etc.) and information identifying the tourists (Country of origin, type of visit, etc.). The survey also provides information on the specific destination within the canton (City, hotel, etc.).

Our report aims to simplify the comprehension of this raw data through data visualization techniques and plots. Additionally, we aim to categorize the types of tourists visiting Vaud and their regions of origin. This will help Vaud Plus in understanding the demographics of visitors to the canton and possibly help with targeted marketing efforts.

The first part of our report presents the data in a more readable format. Following that, we conduct exploratory data analysis (EDA), which involves creating basic charts to provide perspective and convey the scale of the variables to the reader. Next, we proceed to the analysis phase, where we cross-analyze multiple variables to highlight correlations. The final section of the report is dedicated to plotting various variables on a map of the districts of Canton Vaud. Lastly, we will articulate our conclusions about the survey data and share our experience with this report.

## An overview of the Districts and Cities

```{r, echo = FALSE}
# Create a new column 'leaflet_region' with NA values
data$leaflet_districts <- NA

# Assign cities to districts based on conditions
data$leaflet_districts[data$F105_Code == "Lausanne"] <- "Lausanne"
data$leaflet_districts[data$F105_Code %in% c("Montreux", "Vevey", "La Tour-de-Peilz", "Rougemont", "Château-d'Oex", "Veytaux", "Rossinière", "Corsier-sur-Vevey", "Saint-Légier-La-Chiésaz", "Blonay", "Chardonne", "Chernex")] <- "Riviera-Pays-d'Enhaut"
data$leaflet_districts[data$F105_Code %in% c("Morges", "Yens", "Aubonne")] <- "Morges"
data$leaflet_districts[data$F105_Code %in% c("Yverdon-les-Bains", "L'Abbaye", "Vallorbe", "Orbe", "Yvonand", "La Praz", "Le Chenit", "Bullet", "Montagny-près-Yverdon", "Saint Croix", "Le Rocheray", "Le Pont", "Le Sentier", "Le Brassus", "Les Rasses", "Les Charbonnieres")] <- "Jura-Nord vaudois"
data$leaflet_districts[data$F105_Code %in% c("Aigle", "Leysin", "Villeneuve (VD)", "Ormont-Dessus", "Bex", "Lavey-Morcles", "Gryon", "Ormont-Dessous", "Les Diablerets", "Villars-sur-Ollon")] <- "Aigle"
data$leaflet_districts[data$F105_Code %in% c("Nyon", "Prangins", "Chavannes-de-Bogis", "Coppet", "Rolle", "Commugny", "Duillier", "Gilly", "Founex")] <- "Nyon"
data$leaflet_districts[data$F105_Code %in% c("Valbroye", "Lucens", "Avenches", "Payerne", "Cudrefin", "St. Aubin", "Estavayer-le-Lac")] <- "Broye-Vully"
data$leaflet_districts[data$F105_Code %in% c("Crissier", "Bussigny", "Ecublens (VD)", "Renens", "Saint-Sulpice (VD)")] <- "Ouest lausannois"
data$leaflet_districts[data$F105_Code %in% c("Chexbres", "Bourg-en-Lavaux", "Cully")] <- "Lavaux-Oron"
data$leaflet_districts[data$F105_Code %in% c("Echallens")] <- "Gros-de-Vaud"

# export the data in a csv file
write.csv(data, here("data", "district_map.csv"), row.names = FALSE)


# Data from https://labs.karavia.ch/swiss-boundaries-geojson/
districts <- sf::read_sf(here("data","swiss_districts.geojson"))

vaud <- districts |>
  dplyr::filter(KANTONSNUM == 22)

# Count districts in data and add to vaud
vaud$sum <- NA

vaud$sum[vaud$NAME == "Jura-Nord vaudois"] <- sum(data$leaflet_districts == "Jura-Nord vaudois")
vaud$sum[vaud$NAME == "Aigle"] <- sum(data$leaflet_districts == "Aigle")
vaud$sum[vaud$NAME == "Morges"] <- sum(data$leaflet_districts == "Morges")
vaud$sum[vaud$NAME == "Nyon"] <- sum(data$leaflet_districts == "Nyon")
vaud$sum[vaud$NAME == "Riviera-Pays-d'Enhaut"] <- sum(data$leaflet_districts == "Riviera-Pays-d'Enhaut")
vaud$sum[vaud$NAME == "Gros-de-Vaud"] <- sum(data$leaflet_districts == "Gros-de-Vaud")
vaud$sum[vaud$NAME == "Broye-Vully"] <- sum(data$leaflet_districts == "Broye-Vully")
vaud$sum[vaud$NAME == "Lavaux-Oron"] <- sum(data$leaflet_districts == "Lavaux-Oron")
vaud$sum[vaud$NAME == "Lausanne"] <- sum(data$leaflet_districts == "Lausanne")
vaud$sum[vaud$NAME == "Broye-Vully"] <- sum(data$leaflet_districts == "Broye-Vully")
vaud$sum[vaud$NAME == "Ouest lausannois"] <- sum(data$leaflet_districts == "Ouest lausannois")

# Now we will plot the proportion of couples for each district in %
vaud$value <- 1

# Couples proportion plot
value_palette <- leaflet::colorNumeric(palette = "Purples", domain = vaud$value)


leaflet(vaud) %>%
  leaflet::addTiles() %>%
  leaflet::setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  leaflet::addPolygons(fillOpacity = 0.75, color = ~value_palette(vaud$value), weight = 0) %>%
  leaflet::addPolygons(color = "black", weight = 2, fillOpacity = 0, label = paste(vaud$NAME))
```

```{r}
# Extract city names from the F105_Code column
cities <- data %>% select(F105_Code) %>% distinct() %>% pull(F105_Code)

# Function to get coordinates for a city using an API (e.g., OpenStreetMap)
get_coordinates <- function(city) {
  url <- paste0("https://nominatim.openstreetmap.org/search?city=", URLencode(city), "&format=json&limit=1")
  result <- fromJSON(url)
  if (length(result) == 0) {
    return(data.frame(city = city, lat = NA, lon = NA))
  } else {
    return(data.frame(city = city, lat = as.numeric(result[[1]]$lat), lon = as.numeric(result[[1]]$lon)))
  }
}

# Initialize an empty data frame to store coordinates
coordinates <- data.frame(city = character(), lat = numeric(), lon = numeric(), stringsAsFactors = FALSE)

# Get coordinates for all cities
for (city in cities) {
  coord <- get_coordinates(city)
  coordinates <- rbind(coordinates, coord)
}

# Filter out cities without coordinates
coordinates <- coordinates %>% filter(!is.na(lat) & !is.na(lon))

# Create the leaflet map
map <- leaflet(data = coordinates) %>%
  addTiles() %>%
  addMarkers(~lon, ~lat, popup = ~city)

# Print the map
map
```



```{r}
states <- read_sf(here("data", "world-administrative-boundaries.shp"))

m <- leaflet() %>%
  addProviderTiles(providers$CartoDB.PositronNoLabels)  %>% 
  setView(lng = 9, lat = 46, zoom = 3) %>% 
  addPolygons(data = states,
              weight = 1)
m
```


