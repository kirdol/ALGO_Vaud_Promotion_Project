```{r, echo = FALSE, output = FALSE}
# Load the packages and load the data
source(here::here("scripts", "setup.R"))
data <- read.csv(here("data","TMS_dataset_Vaud_20240314_FINAL.csv"),
                 sep = ",")
```

# Introduction

The object of this report is the tourism survey conducted by Tourismus Monitor Schweiz, focusing on tourists visiting the canton of Vaud, Switzerland, from November 2022 to March 2024. The survey aims to gather essential data about these tourists, including details about their stay in Switzerland (such as length of stay and expenditure) and demographic information (such as country of origin and type of visit). Additionally, the survey provides insights into specific destinations within the canton, including cities, hotels, and other.

Our report aims to simplify the comprehension of this raw data through data visualization techniques and plots. Additionally, we aim to categorize the types of tourists visiting Vaud and their regions of origin. This will help Vaud Promotion to understand the demographics of visitors to the canton and possibly help with targeted marketing efforts.

The first part of our report presents the data in a more accessible format. Subsequently, we conducted an exploratory data analysis (EDA), which involves the creation of basic charts to provide perspective and convey the scale of the variables to the reader. Next, we proceed to the analysis phase, during which we undertook cross-analyze of multiple variables to highlight correlations. The final section of the report is devoted to plotting various variables on a map of the districts of Canton Vaud. Lastly, we will articulate our conclusions about the survey data and share our experience with this report.

## An overview of the Districts and Countries of origin

### Districts of the canton of Vaud

The following map illustrates the ten districts of the canton of Vaud, which will be the focus of this document.

```{r, echo = FALSE}
# Create a new column 'leaflet_region' with NA values
data$leaflet_districts <- NA

# Assign cities to districts based on conditions
data$leaflet_districts[data$F105_Code == "Lausanne"] <- "Lausanne"
data$leaflet_districts[data$F105_Code %in% c("Montreux", "Vevey", "La Tour-de-Peilz", "Rougemont", "Château-d'Oex", "Veytaux", "Rossinière", "Corsier-sur-Vevey", "Saint-Légier-La-Chiésaz", "Blonay", "Chardonne", "Chernex")] <- "Riviera-Pays-d'Enhaut"
data$leaflet_districts[data$F105_Code %in% c("Morges", "Yens", "Aubonne")] <- "Morges"
data$leaflet_districts[data$F105_Code %in% c("Yverdon-les-Bains", "L'Abbaye", "Vallorbe", "Orbe", "Yvonand", "La Praz", "Le Chenit", "Bullet", "Montagny-près-Yverdon", "Saint Croix", "Le Rocheray", "Le Pont", "Le Sentier", "Le Brassus", "Les Rasses", "Les Charbonnieres")] <- "Jura-Nord vaudois"
data$leaflet_districts[data$F105_Code %in% c("Aigle", "Leysin", "Villeneuve (VD)", "Ormont-Dessus", "Bex", "Lavey-Morcles", "Gryon", "Ormont-Dessous", "Les Diablerets", "Villars-sur-Ollon")] <- "Aigle"
data$leaflet_districts[data$F105_Code %in% c("Nyon", "Prangins", "Chavannes-de-Bogis", "Coppet", "Rolle", "Commugny", "Duillier", "Gilly", "Founex")] <- "Nyon"
data$leaflet_districts[data$F105_Code %in% c("Valbroye", "Lucens", "Avenches", "Payerne", "Cudrefin", "St. Aubin", "Estavayer-le-Lac")] <- "Broye-Vully"
data$leaflet_districts[data$F105_Code %in% c("Crissier", "Bussigny", "Ecublens (VD)", "Renens", "Saint-Sulpice (VD)")] <- "Ouest lausannois"
data$leaflet_districts[data$F105_Code %in% c("Chexbres", "Bourg-en-Lavaux", "Cully")] <- "Lavaux-Oron"
data$leaflet_districts[data$F105_Code %in% c("Echallens")] <- "Gros-de-Vaud"

# export the data in a csv file
write.csv(data, here("data", "district_map.csv"), row.names = FALSE)


# Data from https://labs.karavia.ch/swiss-boundaries-geojson/
districts <- sf::read_sf(here("data","swiss_districts.geojson"))

vaud <- districts |>
  dplyr::filter(KANTONSNUM == 22)

# Count districts in data and add to vaud
vaud$sum <- NA

vaud$sum[vaud$NAME == "Jura-Nord vaudois"] <- sum(data$leaflet_districts == "Jura-Nord vaudois")
vaud$sum[vaud$NAME == "Aigle"] <- sum(data$leaflet_districts == "Aigle")
vaud$sum[vaud$NAME == "Morges"] <- sum(data$leaflet_districts == "Morges")
vaud$sum[vaud$NAME == "Nyon"] <- sum(data$leaflet_districts == "Nyon")
vaud$sum[vaud$NAME == "Riviera-Pays-d'Enhaut"] <- sum(data$leaflet_districts == "Riviera-Pays-d'Enhaut")
vaud$sum[vaud$NAME == "Gros-de-Vaud"] <- sum(data$leaflet_districts == "Gros-de-Vaud")
vaud$sum[vaud$NAME == "Broye-Vully"] <- sum(data$leaflet_districts == "Broye-Vully")
vaud$sum[vaud$NAME == "Lavaux-Oron"] <- sum(data$leaflet_districts == "Lavaux-Oron")
vaud$sum[vaud$NAME == "Lausanne"] <- sum(data$leaflet_districts == "Lausanne")
vaud$sum[vaud$NAME == "Broye-Vully"] <- sum(data$leaflet_districts == "Broye-Vully")
vaud$sum[vaud$NAME == "Ouest lausannois"] <- sum(data$leaflet_districts == "Ouest lausannois")

# Now we will plot the proportion of couples for each district in %
vaud$value <- 1

# Couples proportion plot
value_palette <- leaflet::colorNumeric(palette = default_color, domain = vaud$value)


leaflet(vaud) %>%
  leaflet::addTiles() %>%
  leaflet::setView(lng = 6.63, lat = 46.61, zoom = 9) %>%
  leaflet::addPolygons(fillOpacity = 0.75, color = ~value_palette(vaud$value), weight = 0) %>%
  leaflet::addPolygons(color = "black", weight = 1, fillOpacity = 0, label = paste(vaud$NAME))
```

### Countries of origin

The map below illustrates the countries of origin of the tourists visiting Vaud. This provides an indication of the extent of the survey and the diversity of the tourists visiting the canton.

```{r, echo = FALSE, message = FALSE}
# Read in the dataset
data <- read_csv(here::here("data", "TMS_dataset_Vaud_20240314_FINAL.csv"))

# Calculate the proportions
country_proportions <- data %>%
  count(F05_02_ENG) %>%
  mutate(Proportion = n / sum(n)) %>%
  select(Country = F05_02_ENG, Proportion)

# Read in the world boundaries shapefile
country <- read_sf(here::here("data", "world-administrative-boundaries.shp"))

# Assuming the correct column for joining is 'name'
# Join the proportions data with the shapefile data
country <- country %>%
  left_join(country_proportions, by = c("name" = "Country")) %>%
  filter(!is.na(Proportion))  # Filter out countries not in the data

# Define color palette
color_pal <- colorBin("YlGnBu", domain = country$Proportion, bins = 10, na.color = "transparent")

# Create the leaflet map
m <- leaflet(country) %>%
  addProviderTiles(providers$CartoDB.PositronNoLabels) %>%
  setView(lng = 9, lat = 46, zoom = 1.5) %>%
  addPolygons(weight = 1, color = "white", fillColor = default_color,
              fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = "#666", fillOpacity = 0.7),
              label = ~paste(""),
              labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto")) %>%
  addPolygons(color = "black", weight = 1, fillOpacity = 0, label = ~paste(name), labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"))

# Display the map
m
```

```{r, eval = FALSE, echo = FALSE}
# Create the leaflet map (with Propotion of tourists from each country)
m <- leaflet(country) %>%
  addProviderTiles(providers$CartoDB.PositronNoLabels) %>%
  setView(lng = 9, lat = 46, zoom = 1.5) %>%
  addPolygons(weight = 1, color = "white", fillColor = ~color_pal(Proportion),
              fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = "#666", fillOpacity = 0.7),
              label = ~paste(name, ":", round(Proportion, 4)*100, "%"),
              labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto")) %>%
  addPolygons(color = "black", weight = 1, fillOpacity = 0, label = ~paste(name, ":", round(Proportion, 4)*100, "%"), labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"))

# Display the map
m
```
